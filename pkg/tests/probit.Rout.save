
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
Loading required package: miscTools
> library( "maxLik" )

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library( "mfx" )
Loading required package: sandwich
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: MASS
Loading required package: betareg
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### linear in age
> estProbitLin <- glm( lfp ~ kids + age + educ, 
+   family = binomial(link = "probit"), 
+   data = Mroz87 )
> summary( estProbitLin )

Call:
glm(formula = lfp ~ kids + age + educ, family = binomial(link = "probit"), 
    data = Mroz87)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.8954  -1.2341   0.8022   1.0588   1.5892  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.071613   0.452493  -0.158  0.87425    
kids        -0.315634   0.122234  -2.582  0.00982 ** 
age         -0.019158   0.006983  -2.743  0.00608 ** 
educ         0.104639   0.021236   4.927 8.33e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  993.43  on 749  degrees of freedom
AIC: 1001.4

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanLin <- c( 1, colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ) )
> # semi-elasticity of age without standard errors
> probitEla( coef( estProbitLin ), xMeanLin, xPos = 3 )
semEla.age      stdEr 
-0.3199102         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estProbitLin, 
+   newdata = as.data.frame( t( xMeanLin * c( 1, 1, 1.005, 1 ) ) ), 
+   type = "response" ) -
+     predict( estProbitLin, 
+       newdata = as.data.frame( t( xMeanLin * c( 1, 1, 0.995, 1 ) ) ), 
+       type = "response" ) )
         1 
-0.3199094 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitElaDeriv( coef( estProbitLin ), xMeanLin, 3 )
                   kids         age        educ 
 0.05742655  0.03996217 19.14172240  0.70559152 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( probitEla, t0 = coef( estProbitLin ), 
+   allXVal = xMeanLin, xPos = 3 )
           (Intercept)       kids      age      educ
semEla.age  0.05742655 0.03996217 19.14172 0.7055915
stdEr               NA         NA       NA        NA
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitElaDeriv( coef( estProbitLin ), xMeanLin, 3,
+   simplified = TRUE )
[1]  0.00000  0.00000 16.69892  0.00000
> # semi-elasticity of age with standard errors (full covariance matrix)
> probitEla( coef( estProbitLin ), xMeanLin, 3, vcov( estProbitLin ) )
semEla.age      stdEr 
-0.3199102  0.1165911 
> # semi-elasticity of age with standard errors (only standard errors)
> probitEla( coef( estProbitLin ), xMeanLin, 3,
+   sqrt( diag( vcov( estProbitLin ) ) ), seSimplify = FALSE )
semEla.age      stdEr 
-0.3199102  0.1370817 
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> probitEla( coef( estProbitLin ), xMeanLin, 3, 
+   sqrt( diag( vcov( estProbitLin ) ) ) )
semEla.age      stdEr 
-0.3199102  0.1166118 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> estProbitLinMfx <- probitmfx( lfp ~ kids + age + educ, data = Mroz87 )
> estProbitLinMfx$mfxest[ "age", 1:2 ] * xMeanLin[ "age" ]
     dF/dx  Std. Err. 
-0.3199102  0.1165911 
> 
> ### quadratic in age
> estProbitQuad <- glm( lfp ~ kids + age + I(age^2) + educ, 
+   family = binomial(link = "probit"), 
+   data = Mroz87 )
> summary( estProbitQuad )

Call:
glm(formula = lfp ~ kids + age + I(age^2) + educ, family = binomial(link = "probit"), 
    data = Mroz87)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.9267  -1.2306   0.7846   1.0526   1.6541  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -4.3289384  1.3943931  -3.105 0.001906 ** 
kids        -0.4387599  0.1295276  -3.387 0.000706 ***
age          0.1921645  0.0658800   2.917 0.003535 ** 
I(age^2)    -0.0024934  0.0007733  -3.224 0.001263 ** 
educ         0.1070407  0.0214110   4.999 5.75e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  982.88  on 748  degrees of freedom
AIC: 992.88

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanQuad <- c( xMeanLin[ 1:3], xMeanLin[3]^2, xMeanLin[4] )
> # semi-elasticity of age without standard errors
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ) )
semEla.age      stdEr 
-0.3193114         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estProbitQuad, 
+   newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 1.005, 1.005^2, 1 ) ) ), 
+   type = "response" ) -
+     predict( estProbitQuad, 
+       newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 0.995, 0.995^2, 1 ) ) ), 
+       type = "response" ) )
         1 
-0.3193229 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitElaDeriv( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ) )
                     kids          age          age         educ 
1.096957e-01 7.633536e-02 2.066394e+01 1.559508e+03 1.347814e+00 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( probitEla, t0 = coef( estProbitQuad ), 
+   allXVal = xMeanQuad, xPos = c( 3, 4 ) )
           (Intercept)       kids      age I(age^2)     educ
semEla.age   0.1096957 0.07633536 20.66394 1559.508 1.347814
stdEr               NA         NA       NA       NA       NA
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitElaDeriv( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ),
+   simplified = TRUE )
[1]    0.00000    0.00000   15.99772 1361.01753    0.00000
> # semi-elasticity of age with standard errors (full covariance matrix)
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), vcov( estProbitQuad ) )
semEla.age      stdEr 
-0.3193114  0.1120032 
> # semi-elasticity of age with standard errors (only standard errors)
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), 
+   sqrt( diag( vcov( estProbitQuad ) ) ), seSimplify = FALSE )
semEla.age      stdEr 
-0.3193114  1.8253970 
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), 
+   sqrt( diag( vcov( estProbitQuad ) ) ) )
semEla.age      stdEr 
-0.3193114  1.4894894 
> # approximate covariance between the coefficient of the linear term and 
> # the coefficient of the quadratic term based on the original data
> se <- sqrt( diag( vcov( estProbitQuad ) ) )
> X <- cbind( Mroz87$age, Mroz87$age^2, 1 )
> XXinv <- solve( t(X) %*% X )
> sigmaSq <- sqrt( ( se["age"]^2 / XXinv[1,1] ) * ( se["I(age^2)"]^2 / XXinv[2,2] ) )
> vcovApp <- diag( se^2 )
> rownames( vcovApp ) <- colnames( vcovApp ) <- names( se )
> vcovApp[ "age", "I(age^2)" ] <- vcovApp[ "I(age^2)", "age" ] <- 
+   sigmaSq * XXinv[1,2]
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), vcovApp )
semEla.age      stdEr 
-0.3193114  0.2492290 
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), vcovApp,
+   seSimplify = TRUE )
 semEla.age       stdEr 
-0.31931141  0.09609747 
> # approximate covariance between the coefficient of the linear term and 
> # the coefficient of the quadratic term based on simulated data
> se <- sqrt( diag( vcov( estProbitQuad ) ) )
> set.seed( 123 )
> x <- rnorm( 1000, xMeanQuad[ "age" ], sd( Mroz87$age ) )
> X <- cbind( x, x^2, 1 )
> XXinv <- solve( t(X) %*% X )
> sigmaSq <- sqrt( ( se["age"]^2 / XXinv[1,1] ) * ( se["I(age^2)"]^2 / XXinv[2,2] ) )
> vcovApp <- diag( se^2 )
> rownames( vcovApp ) <- colnames( vcovApp ) <- names( se )
> vcovApp[ "age", "I(age^2)" ] <- vcovApp[ "I(age^2)", "age" ] <- 
+   sigmaSq * XXinv[1,2]
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), vcovApp )
semEla.age      stdEr 
-0.3193114  0.2747928 
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), vcovApp,
+   seSimplify = TRUE )
semEla.age      stdEr 
-0.3193114  0.1352247 
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), 
+   sqrt( diag( vcov( estProbitQuad ) ) ), 
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE )
semEla.age      stdEr 
-0.3193114  0.2747928 
> probitEla( coef( estProbitQuad ), xMeanQuad, c( 3, 4 ), 
+   sqrt( diag( vcov( estProbitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
semEla.age      stdEr 
-0.3193114  0.1352247 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> # (differs from the above, because mean(age)^2 is not the same as mean(age^2))
> estProbitQuadMfx <- probitmfx( lfp ~ kids + age + I(age^2) + educ, data = Mroz87 )
> estProbitQuadMfx$mfxest[ "age", 1:2 ] * xMeanQuad[ "age" ] +
+   2 * estProbitQuadMfx$mfxest[ "I(age^2)", 1:2 ] * xMeanQuad[ "age" ]^2
     dF/dx  Std. Err. 
-0.3332012  2.1983087 
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal( 
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estProbitInt <- glm( lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
+   family = binomial(link = "probit"), 
+   data = Mroz87 )
> summary( estProbitInt )

Call:
glm(formula = lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
    family = binomial(link = "probit"), data = Mroz87)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.8969  -1.2146   0.8037   1.0693   1.7288  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -0.89156    0.27694  -3.219  0.00128 ** 
kids         -0.37752    0.12668  -2.980  0.00288 ** 
age30.37TRUE  0.13507    0.12702   1.063  0.28762    
age38.44TRUE  0.12146    0.13604   0.893  0.37197    
age53.60TRUE -0.51419    0.16304  -3.154  0.00161 ** 
educ          0.10805    0.02135   5.060 4.19e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  986.78  on 747  degrees of freedom
AIC: 998.78

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanInt <- c( xMeanLin[1:2], mean( Mroz87$age30.37 ), 
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[4] )
> # semi-elasticity of age without standard errors
> probitElaInt( coef( estProbitInt ), xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ) )
    semEla      stdEr 
-0.4719856         NA 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitElaIntDeriv( coef( estProbitInt ), xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ) )
[1] -0.010309885 -0.007174475 -0.885844700  0.279991827  0.716229566
[6] -0.126676033
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( probitElaInt, t0 = coef( estProbitInt ), allXVal = xMeanInt, 
+   xPos = c( 3, 4, 0, 5 ), xBound = c( 30, 37.5, 44.5, 52.5, 60 ) )
       (Intercept)         kids age30.37TRUE age38.44TRUE age53.60TRUE
semEla -0.01030988 -0.007174475   -0.8858447    0.2799918    0.7162296
stdEr           NA           NA           NA           NA           NA
            educ
semEla -0.126676
stdEr         NA
> # semi-elasticity of age with standard errors (full covariance matrix)
> probitElaInt( coef( estProbitInt ), xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), 
+   vcov( estProbitInt ) )
    semEla      stdEr 
-0.4719856  0.1375324 
> # semi-elasticity of age with standard errors (only standard errors)
> probitElaInt( coef( estProbitInt ), xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), 
+   sqrt( diag( vcov( estProbitInt ) ) ) )
    semEla      stdEr 
-0.4719856  0.1666258 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1:2 ], NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> probitEffInt( coef( estProbitLin ), xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ) )
    effect      stdEr 
-0.1506167         NA 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitEffIntDeriv( coef( estProbitLin ), xMeanLinInt, 3, 
+   c( 30, 40 ), c( 50, 60 ) )
[1] 0.01968989 0.01370186 8.65400572 0.24192682
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( probitEffInt, t0 = coef( estProbitLin ), 
+   allXVal = xMeanLinInt, xPos = 3, 
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ) )
       (Intercept)       kids      age      educ
effect  0.01968989 0.01370186 8.654006 0.2419268
stdEr           NA         NA       NA        NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> probitEffInt( coef( estProbitLin ), xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), vcov( estProbitLin ) )
    effect      stdEr 
-0.1506167  0.0545738 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> probitEffInt( coef( estProbitLin ), xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), sqrt( diag( vcov( estProbitLin ) ) ) )
     effect       stdEr 
-0.15061666  0.06132438 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear and quadratic explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[ 1:2 ], NA, NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> probitEffInt( coef( estProbitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ) )
    effect      stdEr 
-0.2528239         NA 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbin:::probitEffIntDeriv( coef( estProbitQuad ), xMeanQuadInt, c( 3, 4 ), 
+   c( 30, 40 ), c( 50, 60 ) )
[1] 2.237943e-03 1.557347e-03 7.675244e+00 6.864825e+02 2.749727e-02
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( probitEffInt, t0 = coef( estProbitQuad ), 
+   allXVal = xMeanQuadInt, xPos = c( 3, 4 ), 
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ) )
       (Intercept)        kids      age I(age^2)       educ
effect 0.002237943 0.001557347 7.675244 686.4822 0.02749727
stdEr           NA          NA       NA       NA         NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> probitEffInt( coef( estProbitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), vcov( estProbitQuad ) )
     effect       stdEr 
-0.25282386  0.06147638 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> probitEffInt( coef( estProbitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), sqrt( diag( vcov( estProbitQuad ) ) ) )
    effect      stdEr 
-0.2528239  0.7331598 
> 
> proc.time()
   user  system elapsed 
  0.488   0.043   0.525 
