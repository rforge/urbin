
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
Loading required package: miscTools
> library( "maxLik" )

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library( "mlogit" )
Loading required package: Formula
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### create categorical variable
> Mroz87$lfp3 <- factor( ifelse( Mroz87$hours == 0, "no",
+   ifelse( Mroz87$hours <= 1300, "part", "full" ) ),
+   levels = c( "no", "part", "full" ) )
> table( Mroz87$lfp3 )

  no part full 
 325  204  224 
> all.equal( Mroz87$lfp3 == "no", Mroz87$lfp == 0 )
[1] TRUE
> 
> ### linear in age
> estMLogitLin <- mlogit( lfp3 ~ 0 | kids + age + educ, data = Mroz87,
+   reflevel = "no", shape = "wide" )
> summary( estMLogitLin )

Call:
mlogit(formula = lfp3 ~ 0 | kids + age + educ, data = Mroz87, 
    reflevel = "no", shape = "wide", method = "nr", print.level = 0)

Frequencies of alternatives:
     no    full    part 
0.43161 0.29748 0.27092 

nr method
4 iterations, 0h:0m:0s 
g'(-H)^-1g = 4.56E-05 
successive function values within tolerance limits 

Coefficients :
                  Estimate Std. Error z-value  Pr(>|z|)    
full:(intercept) -0.080970   0.857853 -0.0944 0.9248021    
part:(intercept) -1.635616   0.888336 -1.8412 0.0655904 .  
full:kids        -0.798954   0.229568 -3.4803 0.0005009 ***
part:kids        -0.152947   0.243626 -0.6278 0.5301387    
full:age         -0.037935   0.013296 -2.8531 0.0043292 ** 
part:age         -0.023613   0.013623 -1.7334 0.0830236 .  
full:educ         0.153286   0.040652  3.7707 0.0001628 ***
part:educ         0.186200   0.041987  4.4347  9.22e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-Likelihood: -789.2
McFadden R^2:  0.026967 
Likelihood ratio test : chisq = 43.745 (p.value = 8.3055e-08)
> # vector for permuting coefficients so that they are ordered in the same way 
> # as expected by urbinEla()
> coefPermuteLin <- c( seq( 1, 7, 2 ), seq( 2, 8, 2 ) )
> # mean values of the explanatory variables
> xMeanLin <- c( 1, colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ) )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, xPos = 3, 
+   model = "MNL", yCat = 1 )
semEla.age      stdEr 
-0.2561675         NA 
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, xPos = 3, 
+   model = "MNL", yCat = 2 )
 semEla.age       stdEr 
-0.06812753          NA 
> # semi-elasticity of age based on numerical derivation
> Mroz87Lower <- as.data.frame( t( xMeanLin * c( 1, 1, 0.995, 1 ) ) )
> Mroz87Lower$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mLower <- mlogit.data( Mroz87Lower, shape = "wide", 
+   choice = "lfp3" )
> Mroz87Upper <- as.data.frame( t( xMeanLin * c( 1, 1, 1.005, 1 ) ) )
> Mroz87Upper$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mUpper <- mlogit.data( Mroz87Upper, shape = "wide", 
+   choice = "lfp3" )
> 100 * ( predict( estMLogitLin, newdata = Mroz87mUpper, type = "response" ) -
+     predict( estMLogitLin, newdata = Mroz87mLower, type = "response" ) )
         no        full        part 
 0.32429382 -0.25616669 -0.06812713 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanLinAttr <- xMeanLin
> attr( xMeanLinAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinAttr, 3, 
+   seSimplify = FALSE, model = "MNL", yCat = 1 )
[1] -0.10351957 -0.07203752  4.49431151 -1.27192968  0.08995030  0.06259490
[7]  0.38023843  1.10520608
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinAttr, 3, 
+   seSimplify = FALSE, model = "MNL", yCat = 2 )
[1]  0.08995030  0.06259490  0.38023843  1.10520608 -0.03107974 -0.02162787
[7]  7.09917510 -0.38187216
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEla, t0 = coef( estMLogitLin )[ coefPermuteLin ], 
+   allXVal = xMeanLin, xPos = 3, model = "MNL", yCat = 1 )
           full:(intercept)   full:kids full:age full:educ part:(intercept)
semEla.age       -0.1035196 -0.07203752 4.494312  -1.27193        0.0899503
stdEr                    NA          NA       NA        NA               NA
           part:kids  part:age part:educ
semEla.age 0.0625949 0.3802384  1.105206
stdEr             NA        NA        NA
> numericGradient( urbinEla, t0 = coef( estMLogitLin )[ coefPermuteLin ], 
+   allXVal = xMeanLin, xPos = 3, model = "MNL", yCat = 2 )
           full:(intercept) full:kids  full:age full:educ part:(intercept)
semEla.age        0.0899503 0.0625949 0.3802384  1.105206      -0.03107974
stdEr                    NA        NA        NA        NA               NA
             part:kids part:age  part:educ
semEla.age -0.02162787 7.099175 -0.3818722
stdEr               NA       NA         NA
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinAttr, 3, 
+   model = "MNL", seSimplify = TRUE, yCat = 1 )
[1]  0.000000  0.000000  8.897811  0.000000  0.000000  0.000000 -3.446054
[8]  0.000000
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinAttr, 3, 
+   model = "MNL", seSimplify = TRUE, yCat = 2 )
[1]  0.000000  0.000000 -3.446054  0.000000  0.000000  0.000000  8.421240
[8]  0.000000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, 3, model = "MNL", 
+   vcov( estMLogitLin )[ coefPermuteLin, coefPermuteLin ], yCat = 1 )
semEla.age      stdEr 
-0.2561675  0.1064539 
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, 3, model = "MNL", 
+   vcov( estMLogitLin )[ coefPermuteLin, coefPermuteLin ], yCat = 2 )
 semEla.age       stdEr 
-0.06812753  0.10334845 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, 3, model = "MNL",
+   sqrt( diag( vcov( estMLogitLin ) ) )[ coefPermuteLin ], seSimplify = FALSE, 
+   yCat = 1 )
semEla.age      stdEr 
-0.2561675  0.1523216 
Warning message:
In urbinEla(coef(estMLogitLin)[coefPermuteLin], xMeanLin, 3, model = "MNL",  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, 3, model = "MNL",
+   sqrt( diag( vcov( estMLogitLin ) ) )[ coefPermuteLin ], seSimplify = FALSE, 
+   yCat = 2 )
 semEla.age       stdEr 
-0.06812753  0.13639902 
Warning message:
In urbinEla(coef(estMLogitLin)[coefPermuteLin], xMeanLin, 3, model = "MNL",  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, 3, model = "MNL", 
+   sqrt( diag( vcov( estMLogitLin ) ) )[ coefPermuteLin ], yCat = 1 )
semEla.age      stdEr 
-0.2561675  0.1272792 
> urbinEla( coef( estMLogitLin )[ coefPermuteLin ], xMeanLin, 3, model = "MNL", 
+   sqrt( diag( vcov( estMLogitLin ) ) )[ coefPermuteLin ], yCat = 2 )
 semEla.age       stdEr 
-0.06812753  0.12353058 
> 
> ### quadratic in age
> estMLogitQuad <- mlogit( lfp3 ~ 0 | kids + age + I(age^2) + educ, 
+   data = Mroz87, reflevel = "no", shape = "wide" )
> summary( estMLogitQuad )

Call:
mlogit(formula = lfp3 ~ 0 | kids + age + I(age^2) + educ, data = Mroz87, 
    reflevel = "no", shape = "wide", method = "nr", print.level = 0)

Frequencies of alternatives:
     no    full    part 
0.43161 0.29748 0.27092 

nr method
4 iterations, 0h:0m:0s 
g'(-H)^-1g = 3.79E-05 
successive function values within tolerance limits 

Coefficients :
                   Estimate Std. Error z-value  Pr(>|z|)    
full:(intercept) -7.8422035  2.7042292 -2.9000 0.0037319 ** 
part:(intercept) -7.2660403  2.7589379 -2.6336 0.0084476 ** 
full:kids        -1.0073935  0.2417651 -4.1668 3.089e-05 ***
part:kids        -0.3316981  0.2589500 -1.2809 0.2002165    
full:age          0.3463084  0.1275291  2.7155 0.0066171 ** 
part:age          0.2567206  0.1310451  1.9590 0.0501099 .  
full:I(age^2)    -0.0045277  0.0014999 -3.0188 0.0025381 ** 
part:I(age^2)    -0.0033047  0.0015461 -2.1375 0.0325573 *  
full:educ         0.1571405  0.0411102  3.8224 0.0001321 ***
part:educ         0.1886727  0.0422503  4.4656 7.985e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-Likelihood: -783.91
McFadden R^2:  0.033493 
Likelihood ratio test : chisq = 54.331 (p.value = 5.9544e-09)
> # vector for permuting coefficients so that they are ordered in the same way 
> # as expected by urbinEla()
> coefPermuteQuad <- c( seq( 1, 9, 2 ), seq( 2, 10, 2 ) )
> # mean values of the explanatory variables
> xMeanQuad <- c( xMeanLin[ 1:3 ], xMeanLin[3]^2, xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", yCat = 1 )
semEla.age      stdEr 
-0.2691503         NA 
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", yCat = 2 )
 semEla.age       stdEr 
-0.04998031          NA 
> # semi-elasticity of age based on numerical derivation
> Mroz87Lower <- as.data.frame( 
+   t( xMeanQuad * c( 1, 1, 0.995, 0.995^2, 1 ) ) )
> Mroz87Lower$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mLower <- mlogit.data( Mroz87Lower, shape = "wide", 
+   choice = "lfp3" )
> Mroz87Upper <- as.data.frame( 
+   t( xMeanQuad * c( 1, 1, 1.005, 1.005^2, 1 ) ) )
> Mroz87Upper$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mUpper <- mlogit.data( Mroz87Upper, shape = "wide", 
+   choice = "lfp3" )
> 100 * ( predict( estMLogitQuad, newdata = Mroz87mUpper, type = "response" ) -
+     predict( estMLogitQuad, newdata = Mroz87mLower, type = "response" ) )
         no        full        part 
 0.31914266 -0.26914621 -0.04999644 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanQuadAttr <- xMeanQuad
> attr( xMeanQuadAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadAttr, c( 3, 4 ), 
+   model = "MNL", seSimplify = FALSE, yCat = 1 )
 [1]   -0.08515053   -0.05925482    5.94795276  660.10342942   -1.04623197
 [6]    0.09516231    0.06622184   -0.16996612 -186.65318577    1.16924522
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadAttr, c( 3, 4 ), 
+   model = "MNL", seSimplify = FALSE, yCat = 2 )
 [1]    0.09516231    0.06622184   -0.16996612 -186.65318577    1.16924522
 [6]   -0.02098258   -0.01460142    7.86762504  707.31099651   -0.25780981
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEla, t0 = coef( estMLogitQuad )[ coefPermuteQuad ], 
+   allXVal = xMeanQuad, xPos = c( 3, 4 ), model = "MNL", yCat = 1 )
           full:(intercept)   full:kids full:age full:I(age^2) full:educ
semEla.age      -0.08515053 -0.05925482 5.947953      660.1033 -1.046232
stdEr                    NA          NA       NA            NA        NA
           part:(intercept)  part:kids   part:age part:I(age^2) part:educ
semEla.age       0.09516231 0.06622184 -0.1699661     -186.6532  1.169245
stdEr                    NA         NA         NA            NA        NA
> numericGradient( urbinEla, t0 = coef( estMLogitQuad )[ coefPermuteQuad ], 
+   allXVal = xMeanQuad, xPos = c( 3, 4 ), model = "MNL", yCat = 2 )
           full:(intercept)  full:kids   full:age full:I(age^2) full:educ
semEla.age       0.09516231 0.06622184 -0.1699661     -186.6532  1.169245
stdEr                    NA         NA         NA            NA        NA
           part:(intercept)   part:kids part:age part:I(age^2)  part:educ
semEla.age      -0.02098258 -0.01460142 7.867625      707.3109 -0.2578098
stdEr                    NA          NA       NA            NA         NA
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadAttr, c( 3, 4 ), 
+   model = "MNL", seSimplify = TRUE, yCat = 1 )
 [1]    0.000000    0.000000    9.570073  814.180631    0.000000    0.000000
 [7]    0.000000   -4.217966 -358.846385    0.000000
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadAttr, c( 3, 4 ), 
+   model = "MNL", seSimplify = TRUE, yCat = 2 )
 [1]    0.000000    0.000000   -4.217966 -358.846385    0.000000    0.000000
 [7]    0.000000    8.760179  745.278307    0.000000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", vcov( estMLogitQuad )[ coefPermuteQuad, coefPermuteQuad ],
+   yCat = 1 )
semEla.age      stdEr 
-0.2691503  0.1197244 
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", vcov( estMLogitQuad )[ coefPermuteQuad, coefPermuteQuad ],
+   yCat = 2 )
 semEla.age       stdEr 
-0.04998031  0.11085611 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ], 
+   seSimplify = FALSE, yCat = 1 )
semEla.age      stdEr 
-0.2691503  1.3289570 
Warning messages:
1: In urbinEla(coef(estMLogitQuad)[coefPermuteQuad], xMeanQuad, c(3,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
2: In urbinEla(allCoef = coef(estMLogitQuad)[coefPermuteQuad], allXVal = xMeanQuad, xPos = c(3, 4), model = "MNL", allCoefVcov = sqrt(diag(vcov(estMLogitQuad)))[coefPermuteQuad], seSimplify = FALSE, yCat = 1) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ], 
+   seSimplify = FALSE, yCat = 2 )
 semEla.age       stdEr 
-0.04998031  1.55240787 
Warning messages:
1: In urbinEla(coef(estMLogitQuad)[coefPermuteQuad], xMeanQuad, c(3,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
2: In urbinEla(allCoef = coef(estMLogitQuad)[coefPermuteQuad], allXVal = xMeanQuad, xPos = c(3, 4), model = "MNL", allCoefVcov = sqrt(diag(vcov(estMLogitQuad)))[coefPermuteQuad], seSimplify = FALSE, yCat = 2) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   yCat = 1 )
semEla.age      stdEr 
-0.2691503  1.8958101 
Warning message:
In urbinEla(allCoef = coef(estMLogitQuad)[coefPermuteQuad], allXVal = xMeanQuad, xPos = c(3, 4), model = "MNL", allCoefVcov = sqrt(diag(vcov(estMLogitQuad)))[coefPermuteQuad], yCat = 1) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   yCat = 2 )
 semEla.age       stdEr 
-0.04998031  1.79571109 
Warning message:
In urbinEla(allCoef = coef(estMLogitQuad)[coefPermuteQuad], allXVal = xMeanQuad, xPos = c(3, 4), model = "MNL", allCoefVcov = sqrt(diag(vcov(estMLogitQuad)))[coefPermuteQuad], yCat = 2) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd)
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE, yCat = 1 )
semEla.age      stdEr 
-0.2691503  0.1988943 
Warning message:
In urbinEla(coef(estMLogitQuad)[coefPermuteQuad], xMeanQuad, c(3,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE, yCat = 2 )
 semEla.age       stdEr 
-0.04998031  0.17817886 
Warning message:
In urbinEla(coef(estMLogitQuad)[coefPermuteQuad], xMeanQuad, c(3,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd, simplified)
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ), yCat = 1 )
semEla.age      stdEr 
-0.2691503  0.1721173 
> urbinEla( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuad, c( 3, 4 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ), yCat = 2 )
 semEla.age       stdEr 
-0.04998031  0.16307252 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> # (differs from the above, because mean(age)^2 is not the same as mean(age^2))
> # estMLogitQuadMfx <- logitmfx( lfp ~ kids + age + I(age^2) + educ, data = Mroz87 )
> # estMLogitQuadMfx$mfxest[ "age", 1:2 ] * xMeanQuad[ "age" ] +
> #   2 * estMLogitQuadMfx$mfxest[ "I(age^2)", 1:2 ] * xMeanQuad[ "age" ]^2
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal( 
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estMLogitInt <- mlogit( lfp3 ~ 0 | kids + age30.37 + age38.44 + age53.60 + educ, 
+   data = Mroz87, reflevel = "no", shape = "wide" )
> summary( estMLogitInt )

Call:
mlogit(formula = lfp3 ~ 0 | kids + age30.37 + age38.44 + age53.60 + 
    educ, data = Mroz87, reflevel = "no", shape = "wide", method = "nr", 
    print.level = 0)

Frequencies of alternatives:
     no    full    part 
0.43161 0.29748 0.27092 

nr method
4 iterations, 0h:0m:0s 
g'(-H)^-1g = 0.000156 
successive function values within tolerance limits 

Coefficients :
                   Estimate Std. Error z-value  Pr(>|z|)    
full:(intercept)  -1.778572   0.528266 -3.3668 0.0007604 ***
part:(intercept)  -2.568781   0.555695 -4.6226 3.789e-06 ***
full:kids         -0.912619   0.238818 -3.8214 0.0001327 ***
part:kids         -0.244773   0.251658 -0.9726 0.3307322    
full:age30.37TRUE  0.355065   0.245880  1.4441 0.1487232    
part:age30.37TRUE  0.088595   0.243336  0.3641 0.7157949    
full:age38.44TRUE  0.340937   0.261809  1.3022 0.1928351    
part:age38.44TRUE  0.053019   0.262505  0.2020 0.8399363    
full:age53.60TRUE -0.829653   0.310642 -2.6708 0.0075677 ** 
part:age53.60TRUE -0.810793   0.336862 -2.4069 0.0160884 *  
full:educ          0.159152   0.040993  3.8824 0.0001034 ***
part:educ          0.190697   0.042222  4.5166 6.284e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-Likelihood: -785.73
McFadden R^2:  0.031248 
Likelihood ratio test : chisq = 50.688 (p.value = 1.9936e-07)
> # vector for permuting coefficients so that they are ordered in the same way 
> # as expected by urbinEla()
> coefPermuteInt <- c( seq( 1, 11, 2 ), seq( 2, 12, 2 ) )
> # mean values of the explanatory variables
> xMeanInt <- c( xMeanLin[1:2], mean( Mroz87$age30.37 ), 
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL", yCat = 1 )
    semEla      stdEr 
-0.2965814         NA 
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL", yCat = 2 )
    semEla      stdEr 
-0.1773686         NA 
> # semi-elasticities based on numerical derivation
> Mroz87Lower <- Mroz87
> Mroz87Lower$age <- Mroz87$age * 0.95
> Mroz87Lower$age30.37 <- Mroz87Lower$age <= 37.5
> Mroz87Lower$age38.44 <- Mroz87Lower$age > 37.5 & Mroz87Lower$age <= 44.5
> Mroz87Lower$age45.52 <- Mroz87Lower$age > 44.5 & Mroz87Lower$age <= 52.5
> Mroz87Lower$age53.60 <- Mroz87Lower$age > 52.5 
> all.equal( 
+   Mroz87Lower$age30.37 + Mroz87Lower$age38.44 + Mroz87Lower$age45.52 + 
+     Mroz87Lower$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> Mroz87Lower$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mLower <- mlogit.data( Mroz87Lower, shape = "wide", 
+   choice = "lfp3" )
> Mroz87Upper <- Mroz87
> Mroz87Upper$age <- Mroz87$age * 1.05
> Mroz87Upper$age30.37 <- Mroz87Upper$age <= 37.5
> Mroz87Upper$age38.44 <- Mroz87Upper$age > 37.5 & Mroz87Upper$age <= 44.5
> Mroz87Upper$age45.52 <- Mroz87Upper$age > 44.5 & Mroz87Upper$age <= 52.5
> Mroz87Upper$age53.60 <- Mroz87Upper$age > 52.5 
> all.equal( 
+   Mroz87Upper$age30.37 + Mroz87Upper$age38.44 + Mroz87Upper$age45.52 + 
+     Mroz87Upper$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> Mroz87Upper$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mUpper <- mlogit.data( Mroz87Upper, shape = "wide", 
+   choice = "lfp3" )
> 10 * ( colMeans( 
+   predict( estMLogitInt, newdata = Mroz87mUpper, type = "response" ) ) -
+     colMeans(
+       predict( estMLogitInt, newdata = Mroz87mLower, type = "response" ) ) )
         no        full        part 
 0.35009151 -0.25792475 -0.09216676 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanIntAttr <- xMeanInt
> attr( xMeanIntAttr, "derivOnly" ) <- 1 
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanIntAttr,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL", yCat = 1 )
 [1] -0.14527962 -0.10109764 -0.52403920  0.16499772  0.27489583 -1.78502927
 [7]  0.11486282  0.07993110  0.22205517 -0.06848645 -0.06329786  1.41130249
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanIntAttr,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL", yCat = 2 )
 [1]  0.11486282  0.07993110  0.22205517 -0.06848645 -0.06329786  1.41130249
 [7] -0.09346688 -0.06504203 -0.46822636  0.14549102  0.29274452 -1.14841380
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinElaInt, t0 = coef( estMLogitInt )[ coefPermuteInt ], 
+   allXVal = xMeanInt, xPos = c( 3, 4, 0, 5 ), 
+   xBound = c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL", yCat = 1 )
       full:(intercept)  full:kids full:age30.37TRUE full:age38.44TRUE
semEla       -0.1452796 -0.1010976        -0.5240392         0.1649977
stdEr                NA         NA                NA                NA
       full:age53.60TRUE full:educ part:(intercept) part:kids part:age30.37TRUE
semEla         0.2748958 -1.785029        0.1148628 0.0799311         0.2220552
stdEr                 NA        NA               NA        NA                NA
       part:age38.44TRUE part:age53.60TRUE part:educ
semEla       -0.06848645       -0.06329786  1.411302
stdEr                 NA                NA        NA
> numericGradient( urbinElaInt, t0 = coef( estMLogitInt )[ coefPermuteInt ], 
+   allXVal = xMeanInt, xPos = c( 3, 4, 0, 5 ), 
+   xBound = c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL", yCat = 2 )
       full:(intercept) full:kids full:age30.37TRUE full:age38.44TRUE
semEla        0.1148628 0.0799311         0.2220552       -0.06848645
stdEr                NA        NA                NA                NA
       full:age53.60TRUE full:educ part:(intercept)   part:kids
semEla       -0.06329786  1.411302      -0.09346688 -0.06504203
stdEr                 NA        NA               NA          NA
       part:age30.37TRUE part:age38.44TRUE part:age53.60TRUE part:educ
semEla        -0.4682264          0.145491         0.2927445 -1.148414
stdEr                 NA                NA                NA        NA
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL",
+   allCoefVcov = vcov( estMLogitInt )[ coefPermuteInt, coefPermuteInt ],
+   yCat = 1 )
    semEla      stdEr 
-0.2965814  0.1128048 
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL",
+   allCoefVcov = vcov( estMLogitInt )[ coefPermuteInt, coefPermuteInt ],
+   yCat = 2 )
    semEla      stdEr 
-0.1773686  0.1163208 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL",
+   allCoefVcov = sqrt( diag( vcov( estMLogitInt ) ) )[ coefPermuteInt ],
+   yCat = 1 )
    semEla      stdEr 
-0.2965814  0.2220698 
> urbinElaInt( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "MNL",
+   allCoefVcov = sqrt( diag( vcov( estMLogitInt ) ) )[ coefPermuteInt ],
+   yCat = 2 )
    semEla      stdEr 
-0.1773686  0.2014052 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1:2 ], NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], allXVal = xMeanLinInt, 
+   xPos = 3, refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL",
+   yCat = 1 )
    effect      stdEr 
-0.1174682         NA 
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], allXVal = xMeanLinInt, 
+   xPos = 3, refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL",
+   yCat = 2 )
     effect       stdEr 
-0.03457975          NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> Mroz87Ref <- as.data.frame( t( replace( xMeanLin, 3, 35 ) ) )
> Mroz87Ref$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mRef <- mlogit.data( Mroz87Ref, shape = "wide", 
+   choice = "lfp3" )
> Mroz87Int <- as.data.frame( t( replace( xMeanLin, 3, 55 ) ) )
> Mroz87Int$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mInt <- mlogit.data( Mroz87Int, shape = "wide", 
+   choice = "lfp3" )
> predict( estMLogitLin, newdata = Mroz87mInt, type = "response" ) -
+   predict( estMLogitLin, newdata = Mroz87mRef, type = "response" )
         no        full        part 
 0.15204791 -0.11746817 -0.03457975 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanLinIntAttr <- xMeanLinInt
> attr( xMeanLinIntAttr, "derivOnly" ) <- 1 
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinIntAttr, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "MNL", yCat = 1 )
[1] -0.05036251 -0.03504642  1.74563255 -0.61879668  0.04098445  0.02852039
[7]  3.37740996  0.50356991
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinIntAttr, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "MNL", yCat = 2 )
[1]  0.04098445  0.02852039  3.37740996  0.50356991 -0.01626528 -0.01131874
[7]  3.15584284 -0.19984914
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEffInt, t0 = coef( estMLogitLin )[ coefPermuteLin ],
+   allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL", yCat = 1 )
       full:(intercept)   full:kids full:age  full:educ part:(intercept)
effect      -0.05036251 -0.03504642 1.745633 -0.6187967       0.04098445
stdEr                NA          NA       NA         NA               NA
        part:kids  part:age part:educ
effect 0.02852039 0.3111907 0.5035699
stdEr          NA        NA        NA
> numericGradient( urbinEffInt, t0 = coef( estMLogitLin )[ coefPermuteLin ],
+   allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL", yCat = 2 )
       full:(intercept)  full:kids  full:age full:educ part:(intercept)
effect       0.04098445 0.02852039 0.3111907 0.5035699      -0.01626528
stdEr                NA         NA        NA        NA               NA
         part:kids part:age  part:educ
effect -0.01131874 3.155843 -0.1998491
stdEr           NA       NA         NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "MNL", 
+   allCoefVcov = vcov( estMLogitLin )[ coefPermuteLin, coefPermuteLin ], 
+   yCat = 1 )
     effect       stdEr 
-0.11746817  0.06446488 
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "MNL", 
+   allCoefVcov = vcov( estMLogitLin )[ coefPermuteLin, coefPermuteLin ], 
+   yCat = 2 )
     effect       stdEr 
-0.03457975  0.06485197 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], allXVal = xMeanLinInt, 
+   xPos = 3, refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL", 
+   allCoefVcov = sqrt( diag( vcov( estMLogitLin ) ) )[ coefPermuteLin ],
+   yCat = 1 )
     effect       stdEr 
-0.11746817  0.08390749 
> urbinEffInt( coef( estMLogitLin )[ coefPermuteLin ], allXVal = xMeanLinInt, 
+   xPos = 3, refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL", 
+   allCoefVcov = sqrt( diag( vcov( estMLogitLin ) ) )[ coefPermuteLin ],
+   yCat = 2 )
     effect       stdEr 
-0.03457975  0.07648281 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear and quadratic explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[ 1:2 ], NA, NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], allXVal = xMeanQuadInt, 
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "MNL", yCat = 1 )
    effect      stdEr 
-0.1752513         NA 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], allXVal = xMeanQuadInt, 
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "MNL", yCat = 2 )
     effect       stdEr 
-0.07382308          NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> Mroz87Ref <- as.data.frame( t( replace( xMeanQuad, 3:4, c( 35, 35^2 ) ) ) )
> Mroz87Ref$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mRef <- mlogit.data( Mroz87Ref, shape = "wide", 
+   choice = "lfp3" )
> Mroz87Int <- as.data.frame( t( replace( xMeanQuad, 3:4, c( 55, 55^2 ) ) ) )
> Mroz87Int$lfp3 <- factor( "no", levels = levels( Mroz87$lfp3 ) )
> Mroz87mInt <- mlogit.data( Mroz87Int, shape = "wide", 
+   choice = "lfp3" )
> predict( estMLogitQuad, newdata = Mroz87mInt, type = "response" ) -
+   predict( estMLogitQuad, newdata = Mroz87mRef, type = "response" )
         no        full        part 
 0.24919379 -0.17672093 -0.07247287 
> # partial derivatives of the effect wrt the coefficients
> xMeanQuadIntAttr <- xMeanQuadInt
> attr( xMeanQuadIntAttr, "derivOnly" ) <- 1 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadIntAttr, 
+   c( 3, 4 ), c( 30, 40 ), c( 50, 60 ), model = "MNL", yCat = 1 )
 [1]  -0.08522627  -0.05930752  -0.17122875 147.93976018  -1.04716260
 [6]   0.06224584   0.04331583   4.13449840 252.80033163   0.76480544
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadIntAttr, 
+   c( 3, 4 ), c( 30, 40 ), c( 50, 60 ), model = "MNL", yCat = 2 )
 [1]   0.06224584   0.04331583   4.13449840 252.80033163   0.76480544
 [6]  -0.03735647  -0.02599574   2.01139265 252.62524861  -0.45899350
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffInt, t0 = coef( estMLogitQuad )[ coefPermuteQuad ],
+   allXVal = xMeanQuadInt, xPos = c( 3, 4 ),
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL", yCat = 1 )
       full:(intercept)   full:kids   full:age full:I(age^2) full:educ
effect      -0.08522627 -0.05930752 -0.1712288      147.9398 -1.047163
stdEr                NA          NA         NA            NA        NA
       part:(intercept)  part:kids part:age part:I(age^2) part:educ
effect       0.06224584 0.04331583 1.467627      12.78191 0.7648054
stdEr                NA         NA       NA            NA        NA
> numericGradient( urbinEffInt, t0 = coef( estMLogitQuad )[ coefPermuteQuad ],
+   allXVal = xMeanQuadInt, xPos = c( 3, 4 ),
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "MNL", yCat = 2 )
       full:(intercept)  full:kids full:age full:I(age^2) full:educ
effect       0.06224584 0.04331583 1.467627       12.7819 0.7648054
stdEr                NA         NA       NA            NA        NA
       part:(intercept)   part:kids part:age part:I(age^2)  part:educ
effect      -0.03735647 -0.02599574 2.011393      252.6253 -0.4589935
stdEr                NA          NA       NA            NA         NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadInt, 
+   c( 3, 4 ), c( 30, 40 ), c( 50, 60 ), model = "MNL", 
+   allCoefVcov = vcov( estMLogitQuad )[ coefPermuteQuad, coefPermuteQuad ],
+   yCat = 1 )
     effect       stdEr 
-0.17525132  0.06667457 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadInt, 
+   c( 3, 4 ), c( 30, 40 ), c( 50, 60 ), model = "MNL", 
+   allCoefVcov = vcov( estMLogitQuad )[ coefPermuteQuad, coefPermuteQuad ],
+   yCat = 2 )
     effect       stdEr 
-0.07382308  0.07107431 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], allXVal = xMeanQuadInt, 
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   yCat = 1 )
    effect      stdEr 
-0.1752513  0.7628008 
Warning message:
In urbinEffInt(allCoef = coef(estMLogitQuad)[coefPermuteQuad], allXVal = xMeanQuadInt, xPos = c(3, 4), refBound = c(30, 40), intBound = c(50, 60), model = "MNL", allCoefVcov = sqrt(diag(vcov(estMLogitQuad)))[coefPermuteQuad], yCat = 1) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], allXVal = xMeanQuadInt, 
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "MNL", sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   yCat = 2 )
     effect       stdEr 
-0.07382308  0.82721343 
Warning message:
In urbinEffInt(allCoef = coef(estMLogitQuad)[coefPermuteQuad], allXVal = xMeanQuadInt, xPos = c(3, 4), refBound = c(30, 40), intBound = c(50, 60), model = "MNL", allCoefVcov = sqrt(diag(vcov(estMLogitQuad)))[coefPermuteQuad], yCat = 2) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (standard errors + mean value and standard deviation of age)
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "MNL", 
+   allCoefVcov = sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ), yCat = 1 )
     effect       stdEr 
-0.17525132  0.05352258 
> urbinEffInt( coef( estMLogitQuad )[ coefPermuteQuad ], xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "MNL", 
+   allCoefVcov = sqrt( diag( vcov( estMLogitQuad ) ) )[ coefPermuteQuad ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ), yCat = 2 )
     effect       stdEr 
-0.07382308  0.06745470 
> 
> 
> ### grouping and re-basing categorical variables
> ### effects of age changing from the 30-44 category to the 53-60 category
> # without standard errors
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, 
+   xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ), model = "MNL", yCat = 1 )
    effect      stdEr 
-0.1669494         NA 
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, 
+   xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ), model = "MNL", yCat = 2 )
     effect       stdEr 
-0.08649232          NA 
> # effects calculated based on predicted values
> names( xMeanInt ) <- 
+   gsub( "TRUE|full:", "", names( coef( estMLogitInt )[ seq( 1, 11, 2 ) ] ) )
> df30.37 <- df38.44 <- df45.52 <- df53.60 <- as.data.frame( t( xMeanInt ) ) 
> df30.37[ , 3:5 ] <- c( TRUE, FALSE, FALSE )
> df38.44[ , 3:5 ] <- c( FALSE, TRUE, FALSE )
> df45.52[ , 3:5 ] <- c( FALSE, FALSE, FALSE )
> df53.60[ , 3:5 ] <- c( FALSE, FALSE, TRUE )
> df30.37$lfp3 <- df38.44$lfp3 <- df45.52$lfp3 <- df53.60$lfp3 <- 
+   factor( "no", levels = levels( Mroz87$lfp3 ) )
> df30.37m <- mlogit.data( df30.37, shape = "wide", choice = "lfp3" )
> df38.44m <- mlogit.data( df38.44, shape = "wide", choice = "lfp3" )
> df45.52m <- mlogit.data( df45.52, shape = "wide", choice = "lfp3" )
> df53.60m <- mlogit.data( df53.60, shape = "wide", choice = "lfp3" )
> predict( estMLogitInt, newdata = df53.60m, type = "response" ) -
+   sum( Mroz87$age30.37 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estMLogitInt, newdata = df30.37m, type = "response" ) -
+   sum( Mroz87$age38.44 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estMLogitInt, newdata = df38.44m, type = "response" )
         no        full        part 
 0.25344121 -0.16694105 -0.08650017 
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanIntAttr, 
+   c( 3:5 ), c( -1, -1, 1, 0 ), model = "MNL", yCat = 1 )
 [1] -0.08059322 -0.05608346 -0.13230053 -0.09276850  0.14447582 -0.99023703
 [7]  0.06129809  0.04265631  0.05558755  0.03897772 -0.03326718  0.75316064
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanIntAttr, 
+   c( 3:5 ), c( -1, -1, 1, 0 ), model = "MNL", yCat = 2 )
 [1]  0.06129809  0.04265631  0.05558755  0.03897772 -0.03326718  0.75316064
 [7] -0.04615646 -0.03211950 -0.11757200 -0.08244093  0.15385647 -0.56711760
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffCat, t0 = coef( estMLogitInt )[ coefPermuteInt ],
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ),
+   model = "MNL", yCat = 1 )
       full:(intercept)   full:kids full:age30.37TRUE full:age38.44TRUE
effect      -0.08059322 -0.05608346        -0.1323005        -0.0927685
stdEr                NA          NA                NA                NA
       full:age53.60TRUE full:educ part:(intercept)  part:kids
effect         0.1444758 -0.990237       0.06129809 0.04265631
stdEr                 NA        NA               NA         NA
       part:age30.37TRUE part:age38.44TRUE part:age53.60TRUE part:educ
effect        0.05558755        0.03897772       -0.03326718 0.7531606
stdEr                 NA                NA                NA        NA
> numericGradient( urbinEffCat, t0 = coef( estMLogitInt )[ coefPermuteInt ],
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ),
+   model = "MNL", yCat = 2 )
       full:(intercept)  full:kids full:age30.37TRUE full:age38.44TRUE
effect       0.06129809 0.04265631        0.05558755        0.03897772
stdEr                NA         NA                NA                NA
       full:age53.60TRUE full:educ part:(intercept)  part:kids
effect       -0.03326718 0.7531606      -0.04615646 -0.0321195
stdEr                 NA        NA               NA         NA
       part:age30.37TRUE part:age38.44TRUE part:age53.60TRUE  part:educ
effect         -0.117572       -0.08244093         0.1538565 -0.5671176
stdEr                 NA                NA                NA         NA
> # with full covariance matrix
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( -1, -1, 1, 0 ), vcov( estMLogitInt )[ coefPermuteInt, coefPermuteInt ], 
+   model = "MNL", yCat = 1 )
     effect       stdEr 
-0.16694944  0.05015728 
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( -1, -1, 1, 0 ), vcov( estMLogitInt )[ coefPermuteInt, coefPermuteInt ], 
+   model = "MNL", yCat = 2 )
     effect       stdEr 
-0.08649232  0.05409169 
> # with standard errors only
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( -1, -1, 1, 0 ), sqrt( diag( vcov( estMLogitInt ) ) )[ coefPermuteInt ], 
+   model = "MNL", yCat = 1 )
    effect      stdEr 
-0.1669494  0.1000104 
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( -1, -1, 1, 0 ), sqrt( diag( vcov( estMLogitInt ) ) )[ coefPermuteInt ], 
+   model = "MNL", yCat = 2 )
     effect       stdEr 
-0.08649232  0.08816398 
> ### effects of age changing from the 53-60 category to the 38-52 category
> # without standard errors
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( 0, 1, -1, 1 ), model = "MNL", yCat = 1 )
   effect     stdEr 
0.1276568        NA 
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( 0, 1, -1, 1 ), model = "MNL", yCat = 2 )
   effect     stdEr 
0.0943944        NA 
> # effects calculated based on predicted values
> sum( Mroz87$age38.44 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estMLogitInt, newdata = df38.44m, type = "response" ) +
+   sum( Mroz87$age45.52 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estMLogitInt, newdata = df45.52m, type = "response" ) -
+   predict( estMLogitInt, newdata = df53.60m, type = "response" )
         no        full        part 
-0.22244736  0.12866860  0.09377876 
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanIntAttr, 
+   c( 3:5 ), c( 0, 1, -1, 1 ), model = "MNL", yCat = 1 )
 [1]  0.06664107  0.04637440  0.00000000  0.09174462 -0.14447582  0.81880898
 [7] -0.05282959 -0.03676322  0.00000000 -0.03741489  0.03326718 -0.64910941
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanIntAttr, 
+   c( 3:5 ), c( 0, 1, -1, 1 ), model = "MNL", yCat = 2 )
 [1] -0.05282959 -0.03676322  0.00000000 -0.03741489  0.03326718 -0.64910941
 [7]  0.04962748  0.03453492  0.00000000  0.08842759 -0.15385647  0.60976548
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffCat, t0 = coef( estMLogitInt )[ coefPermuteInt ],
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( 0, 1, -1, 1 ), 
+   model = "MNL", yCat = 1 )
       full:(intercept) full:kids full:age30.37TRUE full:age38.44TRUE
effect       0.06664107 0.0463744                 0        0.09174462
stdEr                NA        NA                NA                NA
       full:age53.60TRUE full:educ part:(intercept)   part:kids
effect        -0.1444758  0.818809      -0.05282959 -0.03676322
stdEr                 NA        NA               NA          NA
       part:age30.37TRUE part:age38.44TRUE part:age53.60TRUE  part:educ
effect                 0       -0.03741489        0.03326718 -0.6491094
stdEr                 NA                NA                NA         NA
> numericGradient( urbinEffCat, t0 = coef( estMLogitInt )[ coefPermuteInt ],
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( 0, 1, -1, 1 ), 
+   model = "MNL", yCat = 2 )
       full:(intercept)   full:kids full:age30.37TRUE full:age38.44TRUE
effect      -0.05282959 -0.03676322                 0       -0.03741489
stdEr                NA          NA                NA                NA
       full:age53.60TRUE  full:educ part:(intercept)  part:kids
effect        0.03326718 -0.6491094       0.04962748 0.03453492
stdEr                 NA         NA               NA         NA
       part:age30.37TRUE part:age38.44TRUE part:age53.60TRUE part:educ
effect                 0        0.08842759        -0.1538565 0.6097655
stdEr                 NA                NA                NA        NA
> # with full covariance matrix
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( 0, 1, -1, 1 ), vcov( estMLogitInt )[ coefPermuteInt, coefPermuteInt ], 
+   model = "MNL", yCat = 1 )
    effect      stdEr 
0.12765684 0.04451157 
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( 0, 1, -1, 1 ), vcov( estMLogitInt )[ coefPermuteInt, coefPermuteInt ], 
+   model = "MNL", yCat = 2 )
    effect      stdEr 
0.09439440 0.05057501 
> # with standard errors only
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( 0, 1, -1, 1 ), sqrt( diag( vcov( estMLogitInt ) ) )[ coefPermuteInt ], 
+   model = "MNL", yCat = 1 )
   effect     stdEr 
0.1276568 0.0836684 
> urbinEffCat( coef( estMLogitInt )[ coefPermuteInt ], xMeanInt, c( 3:5 ), 
+   c( 0, 1, -1, 1 ), sqrt( diag( vcov( estMLogitInt ) ) )[ coefPermuteInt ], 
+   model = "MNL", yCat = 2 )
    effect      stdEr 
0.09439440 0.08056437 
> 
> 
> proc.time()
   user  system elapsed 
  0.495   0.027   0.516 
