
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
Loading required package: miscTools
> library( "maxLik" )

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### linear in age
> estLpmLin <- lm( lfp ~ kids + age + educ, 
+   data = Mroz87 )
> summary( estLpmLin )

Call:
lm(formula = lfp ~ kids + age + educ, data = Mroz87)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.8611 -0.5305  0.2752  0.4309  0.7114 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept)  0.474318   0.170693   2.779  0.00559 ** 
kids        -0.114811   0.045641  -2.516  0.01209 *  
age         -0.007155   0.002618  -2.733  0.00642 ** 
educ         0.038931   0.007812   4.983 7.77e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4849 on 749 degrees of freedom
Multiple R-squared:  0.04657,	Adjusted R-squared:  0.04275 
F-statistic: 12.19 on 3 and 749 DF,  p-value: 8.499e-08

> # mean values of the explanatory variables
> xMeanLin <- c( 1, colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ) )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estLpmLin )[ "age" ], xMeanLin[ "age" ], xPos = 1,
+   model = "lpm" )
semEla.age      stdEr 
-0.3043666         NA 
> urbinEla( coef( estLpmLin ), xMeanLin, xPos = 3, model = "lpm" )
semEla.age      stdEr 
-0.3043666         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estLpmLin, 
+   newdata = as.data.frame( t( xMeanLin * c( 1, 1, 1.005, 1 ) ) ) ) -
+     predict( estLpmLin, 
+       newdata = as.data.frame( t( xMeanLin * c( 1, 1, 0.995, 1 ) ) ) ) )
         1 
-0.3043666 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanAgeAttr <- xMeanLin["age"]
> attr( xMeanAgeAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estLpmLin )["age"], xMeanAgeAttr, xPos = 1, model = "lpm" )
[1] 42.53785
> xMeanLinAttr <- xMeanLin
> attr( xMeanLinAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estLpmLin ), xMeanLinAttr, xPos = 3, model = "lpm" )
[1]  0.00000  0.00000 42.53785  0.00000
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEla, t0 = coef( estLpmLin )["age"], 
+   allXVal = xMeanLin["age"], xPos = 1, model = "lpm" )
                age
semEla.age 42.53785
stdEr            NA
> numericGradient( urbinEla, t0 = coef( estLpmLin ), 
+   allXVal = xMeanLin, xPos = 3, model = "lpm" )
           (Intercept) kids      age educ
semEla.age           0    0 42.53785    0
stdEr               NA   NA       NA   NA
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estLpmLin )["age"], xMeanLin["age"], xPos = 1, model = "lpm",
+   sqrt( diag( vcov( estLpmLin ) ) )["age"] )
semEla.age      stdEr 
-0.3043666  0.1113584 
> urbinEla( coef( estLpmLin ), xMeanLin, xPos = 3, model = "lpm",
+   sqrt( diag( vcov( estLpmLin ) ) ) )
semEla.age      stdEr 
-0.3043666  0.1113584 
> 
> ### quadratic in age
> estLpmQuad <- lm( lfp ~ kids + age + I(age^2) + educ, 
+   data = Mroz87 )
> summary( estLpmQuad )

Call:
lm(formula = lfp ~ kids + age + I(age^2) + educ, data = Mroz87)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.8689 -0.5314  0.2697  0.4277  0.7419 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -1.0952517  0.5181741  -2.114 0.034874 *  
kids        -0.1572820  0.0472564  -3.328 0.000917 ***
age          0.0709880  0.0245147   2.896 0.003893 ** 
I(age^2)    -0.0009207  0.0002872  -3.206 0.001405 ** 
educ         0.0390076  0.0077644   5.024 6.34e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4819 on 748 degrees of freedom
Multiple R-squared:  0.05949,	Adjusted R-squared:  0.05446 
F-statistic: 11.83 on 4 and 748 DF,  p-value: 2.539e-09

> # mean values of the explanatory variables
> xMeanQuad <- c( xMeanLin[ 1:3 ], xMeanLin[3]^2, xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanQuad[ "age" ], 
+   xPos = c( 1, 2 ), model = "lpm" )
semEla.age      stdEr 
-0.3122117         NA 
> urbinEla( coef( estLpmQuad ), xMeanQuad, xPos = c( 3, 4 ), model = "lpm" )
semEla.age      stdEr 
-0.3122117         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estLpmQuad, 
+   newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 1.005, 1.005^2, 1 ) ) ) ) -
+     predict( estLpmQuad, 
+       newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 0.995, 0.995^2, 1 ) ) ) ) )
         1 
-0.3122117 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanAgeAttr, 
+   xPos = c( 1, 2 ), model = "lpm" )
[1]   42.53785 3618.93713
> xMeanQuadAttr <- xMeanQuad
> attr( xMeanQuadAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estLpmQuad ), xMeanQuadAttr, xPos = c( 3, 4 ), model = "lpm" )
[1]    0.00000    0.00000   42.53785 3618.93713    0.00000
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEla, t0 = coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], 
+   allXVal = xMeanQuad[ "age" ], xPos = c( 1, 2 ), model = "lpm" )
                age I(age^2)
semEla.age 42.53785 3618.937
stdEr            NA       NA
> numericGradient( urbinEla, t0 = coef( estLpmQuad ), 
+   allXVal = xMeanQuad, xPos = c( 3, 4 ), model = "lpm" )
           (Intercept) kids      age I(age^2) educ
semEla.age           0    0 42.53785 3618.937    0
stdEr               NA   NA       NA       NA   NA
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanQuad["age"], 
+   xPos = c( 1, 2 ), model = "lpm", 
+   vcov( estLpmQuad )[ c( "age", "I(age^2)" ), c( "age", "I(age^2)" ) ] )
semEla.age      stdEr 
-0.3122117  0.1107022 
> urbinEla( coef( estLpmQuad ), xMeanQuad, xPos = c( 3, 4 ), model = "lpm", 
+   vcov( estLpmQuad ) )
semEla.age      stdEr 
-0.3122117  0.1107022 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanQuad[ "age" ], 
+   xPos = c( 1, 2 ), model = "lpm", 
+   sqrt( diag( vcov( estLpmQuad ) ) )[ c( "age", "I(age^2)" ) ] )
semEla.age      stdEr 
-0.3122117  1.4723134 
Warning message:
In prepareVcov(allCoefVcov, length(allCoef), xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> urbinEla( coef( estLpmQuad ), xMeanQuad, xPos = c( 3, 4 ), model = "lpm",
+   sqrt( diag( vcov( estLpmQuad ) ) ) )
semEla.age      stdEr 
-0.3122117  1.4723134 
Warning message:
In prepareVcov(allCoefVcov, length(allCoef), xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> # approximate covariance between the coefficient of the linear term and 
> # the coefficient of the quadratic term based on the original data
> se <- sqrt( diag( vcov( estLpmQuad ) ) )
> X <- cbind( Mroz87$age, Mroz87$age^2, 1 )
> XXinv <- solve( t(X) %*% X )
> sigmaSq <- sqrt( ( se["age"]^2 / XXinv[1,1] ) * ( se["I(age^2)"]^2 / XXinv[2,2] ) )
> vcovApp <- diag( se^2 )
> rownames( vcovApp ) <- colnames( vcovApp ) <- names( se )
> vcovApp[ "age", "I(age^2)" ] <- vcovApp[ "I(age^2)", "age" ] <- 
+   sigmaSq * XXinv[1,2]
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanQuad["age"], 
+   xPos = c( 1, 2 ), model = "lpm", 
+   vcovApp[ c( "age", "I(age^2)" ), c( "age", "I(age^2)" ) ] )
 semEla.age       stdEr 
-0.31221166  0.09504131 
> urbinEla( coef( estLpmQuad ), xMeanQuad, xPos = c( 3, 4 ), model = "lpm", 
+   vcovApp )
 semEla.age       stdEr 
-0.31221166  0.09504131 
> # approximate covariance between the coefficient of the linear term and 
> # the coefficient of the quadratic term based on simulated data
> se <- sqrt( diag( vcov( estLpmQuad ) ) )
> set.seed( 123 )
> x <- rnorm( 1000, xMeanQuad[ "age" ], sd( Mroz87$age ) )
> X <- cbind( x, x^2, 1 )
> XXinv <- solve( t(X) %*% X )
> sigmaSq <- sqrt( ( se["age"]^2 / XXinv[1,1] ) * ( se["I(age^2)"]^2 / XXinv[2,2] ) )
> vcovApp <- diag( se^2 )
> rownames( vcovApp ) <- colnames( vcovApp ) <- names( se )
> vcovApp[ "age", "I(age^2)" ] <- vcovApp[ "I(age^2)", "age" ] <- 
+   sigmaSq * XXinv[1,2]
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanQuad["age"], 
+   xPos = c( 1, 2 ), model = "lpm", 
+   vcovApp[ c( "age", "I(age^2)" ), c( "age", "I(age^2)" ) ] )
semEla.age      stdEr 
-0.3122117  0.1337022 
> urbinEla( coef( estLpmQuad ), xMeanQuad, xPos = c( 3, 4 ), model = "lpm", 
+   vcovApp )
semEla.age      stdEr 
-0.3122117  0.1337022 
> urbinEla( coef( estLpmQuad )[ c( "age", "I(age^2)" ) ], xMeanQuad["age"], 
+   xPos = c( 1, 2 ), model = "lpm",
+   sqrt( diag( vcov( estLpmQuad ) ) )[ c( "age", "I(age^2)" ) ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
semEla.age      stdEr 
-0.3122117  0.1337022 
> urbinEla( coef( estLpmQuad ), xMeanQuad, xPos = c( 3, 4 ), model = "lpm",
+   sqrt( diag( vcov( estLpmQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
semEla.age      stdEr 
-0.3122117  0.1337022 
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal( 
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estLpmInt <- lm( lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
+   data = Mroz87 )
> summary( estLpmInt )

Call:
lm(formula = lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
    data = Mroz87)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.8575 -0.5235  0.2785  0.4369  0.7798 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)   0.173657   0.102366   1.696  0.09022 .  
kids         -0.135936   0.046656  -2.914  0.00368 ** 
age30.37TRUE  0.050186   0.047730   1.051  0.29339    
age38.44TRUE  0.045455   0.051304   0.886  0.37591    
age53.60TRUE -0.191021   0.061047  -3.129  0.00182 ** 
educ          0.039602   0.007771   5.096  4.4e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4835 on 747 degrees of freedom
Multiple R-squared:  0.05473,	Adjusted R-squared:  0.04841 
F-statistic: 8.651 on 5 and 747 DF,  p-value: 5.539e-08

> # coefficients of the 'intervals'
> coefLpmInt <- c( coef( estLpmInt )[3:4], 0, coef( estLpmInt )[5] )
> # mean values of the explanatory variables
> xMeanInt <- c( xMeanLin[1:2], mean( Mroz87$age30.37 ), 
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[4] )
> # mean shares of the 'intervals'
> xMeanIntShares <- c( xMeanInt[3:4], 1 - sum( xMeanInt[3:5] ), xMeanInt[5] )
> # semi-elasticity of age without standard errors
> urbinElaInt( coef( estLpmInt )[3:5], xMeanInt[3:5],
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 1, 2, 0, 3 ), model = "lpm" )
    semEla      stdEr 
-0.4470029         NA 
> urbinElaInt( coef( estLpmInt ), xMeanInt,
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 3, 4, 0, 5 ), model = "lpm" )
    semEla      stdEr 
-0.4470029         NA 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanIntShares3Attr <- xMeanInt[3:5]
> attr( xMeanIntShares3Attr, "derivOnly" ) <- 1 
> urbinElaInt( coef( estLpmInt )[3:5], xMeanIntShares3Attr, 
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 1, 2, 0, 3 ), model = "lpm" )
[1] -2.328617  0.732999  1.902712
> xMeanIntAttr <- xMeanInt
> attr( xMeanIntAttr, "derivOnly" ) <- 1 
> urbinElaInt( coef( estLpmInt ), xMeanIntAttr, 
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 3, 4, 0, 5 ), model = "lpm" )
[1]  0.000000  0.000000 -2.328617  0.732999  1.902712  0.000000
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinElaInt, t0 = coef( estLpmInt )[3:5], allXVal = xMeanInt[3:5], 
+   xBound = c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 1, 2, 0, 3 ), 
+   model = "lpm" )
       age30.37TRUE age38.44TRUE age53.60TRUE
semEla    -2.328617     0.732999     1.902712
stdEr            NA           NA           NA
> numericGradient( urbinElaInt, t0 = coef( estLpmInt ), allXVal = xMeanInt, 
+   xBound = c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 3, 4, 0, 5 ), 
+   model = "lpm" )
       (Intercept) kids age30.37TRUE age38.44TRUE age53.60TRUE educ
semEla           0    0    -2.328617     0.732999     1.902712    0
stdEr           NA   NA           NA           NA           NA   NA
> # semi-elasticity of age with standard errors (full covariance matrix)
> vcovLpmInt <- vcov( estLpmInt )
> vcovLpmInt <- rbind( vcovLpmInt[ 3:4, ], 0, vcovLpmInt[ 5, ] )
> vcovLpmInt <- cbind( vcovLpmInt[ , 3:4 ], 0, vcovLpmInt[ , 5 ] )
> urbinElaInt( coef( estLpmInt )[3:5], xMeanInt[3:5],
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 1, 2, 0, 3 ), model = "lpm",
+   allCoefVcov = vcov( estLpmInt )[ 3:5, 3:5 ] )
    semEla      stdEr 
-0.4470029  0.1359064 
> urbinElaInt( coef( estLpmInt ), xMeanInt,
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 3, 4, 0, 5 ), model = "lpm",
+   allCoefVcov = vcov( estLpmInt ) )
    semEla      stdEr 
-0.4470029  0.1359064 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinElaInt( coef( estLpmInt )[3:5], xMeanInt[3:5],
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 1, 2, 0, 3 ), model = "lpm",
+   allCoefVcov = sqrt( diag( vcov( estLpmInt ) ) )[3:5] )
    semEla      stdEr 
-0.4470029  0.1651043 
> urbinElaInt( coef( estLpmInt ), xMeanInt,
+   c( 30, 37.5, 44.5, 52.5, 60 ), xPos = c( 3, 4, 0, 5 ), model = "lpm",
+   allCoefVcov = sqrt( diag( vcov( estLpmInt ) ) ) )
    semEla      stdEr 
-0.4470029  0.1651043 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1:2 ], NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estLpmLin )[3], NA, c( 30, 40 ), c( 50, 60 ), xPos = 1,
+   model = "lpm" )
    effect      stdEr 
-0.1431039         NA 
> urbinEffInt( coef( estLpmLin ), NA, c( 30, 40 ), c( 50, 60 ), xPos = 3,
+   model = "lpm" )
    effect      stdEr 
-0.1431039         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> predict( estLpmLin, 
+   newdata = as.data.frame( t( replace( xMeanLin, 3, 55 ) ) ) ) -
+   predict( estLpmLin, 
+     newdata = as.data.frame( t( replace( xMeanLin, 3, 35 ) ) ) )
         1 
-0.1431039 
> # partial derivatives of the semi-elasticity wrt the coefficients
> naAttr <- NA
> attr( naAttr, "derivOnly" ) <- 1 
> urbinEffInt( coef( estLpmLin ), naAttr, xPos = 3,
+   c( 30, 40 ), c( 50, 60 ), model = "lpm" )
[1]  0  0 20  0
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEffInt, t0 = coef( estLpmLin )[3], allXVal = NA,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), xPos = 1, model = "lpm" )
       age
effect  20
stdEr   NA
> numericGradient( urbinEffInt, t0 = coef( estLpmLin ), allXVal = NA,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), xPos = 3, model = "lpm" )
       (Intercept) kids age educ
effect           0    0  20    0
stdEr           NA   NA  NA   NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estLpmLin ), NA,
+   c( 30, 40 ), c( 50, 60 ), xPos = 3, model = "lpm",
+   allCoefVcov = vcov( estLpmLin ) )
     effect       stdEr 
-0.14310391  0.05235734 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estLpmLin )[3], NA, c( 30, 40 ), c( 50, 60 ), xPos = 1, 
+   model = "lpm", allCoefVcov = sqrt( diag( vcov( estLpmLin ) ) )[3] )
     effect       stdEr 
-0.14310391  0.05235734 
> urbinEffInt( coef( estLpmLin ), NA, c( 30, 40 ), c( 50, 60 ), xPos = 3, 
+   model = "lpm", allCoefVcov = sqrt( diag( vcov( estLpmLin ) ) ) )
     effect       stdEr 
-0.14310391  0.05235734 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear and quadratic explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[ 1:2 ], NA, NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estLpmQuad )[3:4], NA,
+   c( 30, 40 ), c( 50, 60 ), xPos = 1:2, model = "lpm" )
    effect      stdEr 
-0.2374667         NA 
> urbinEffInt( coef( estLpmQuad ), NA,
+   c( 30, 40 ), c( 50, 60 ), xPos = 3:4, model = "lpm" )
    effect      stdEr 
-0.2374667         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> predict( estLpmQuad, 
+   newdata = as.data.frame( t( replace( xMeanQuad, 3:4, c( 55, 55^2 ) ) ) ), 
+   type = "response" ) -
+   predict( estLpmQuad, 
+     newdata = as.data.frame( t( replace( xMeanQuad, 3:4, c( 35, 35^2 ) ) ) ), 
+     type = "response" )
         1 
-0.2374667 
> # partial derivatives of the effect wrt the coefficients
> urbinEffInt( coef( estLpmQuad ), naAttr, xPos = c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "lpm" )
[1]    0    0   20 1800    0
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffInt, t0 = coef( estLpmQuad )[3:4], allXVal = NA,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), xPos = 1:2, model = "lpm" )
       age I(age^2)
effect  20     1800
stdEr   NA       NA
> numericGradient( urbinEffInt, t0 = coef( estLpmQuad ),
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), xPos = 3:4, model = "lpm" )
       (Intercept) kids age I(age^2) educ
effect           0    0  20     1800    0
stdEr           NA   NA  NA       NA   NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estLpmQuad )[3:4], NA, c( 30, 40 ), c( 50, 60 ), 
+   xPos = 1:2, model = "lpm", allCoefVcov = vcov( estLpmQuad )[3:4,3:4] )
     effect       stdEr 
-0.23746667  0.05978481 
> urbinEffInt( coef( estLpmQuad ), NA, c( 30, 40 ), c( 50, 60 ), 
+   xPos = 3:4, model = "lpm", allCoefVcov = vcov( estLpmQuad ) )
     effect       stdEr 
-0.23746667  0.05978481 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estLpmQuad )[3:4], NA, c( 30, 40 ), c( 50, 60 ), 
+   xPos = 1:2, model = "lpm", 
+   allCoefVcov = sqrt( diag( vcov( estLpmQuad ) ) )[3:4] )
    effect      stdEr 
-0.2374667  0.7124862 
Warning message:
In prepareVcov(allCoefVcov, nCoef, xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> urbinEffInt( coef( estLpmQuad ), NA, c( 30, 40 ), c( 50, 60 ), 
+   xPos = 3:4, model = "lpm", 
+   allCoefVcov = sqrt( diag( vcov( estLpmQuad ) ) ) )
    effect      stdEr 
-0.2374667  0.7124862 
Warning message:
In prepareVcov(allCoefVcov, nCoef, xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (standard errors + mean value and standard deviation of age)
> urbinEffInt( coef( estLpmQuad ), NA, xPos = c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   allCoefVcov = sqrt( diag( vcov( estLpmQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.23746667  0.06991987 
> 
> ### grouping and re-basing categorical variables
> ### effects of age changing from the 30-44 category to the 53-60 category
> # without standard errors
> urbinEffCat( coef( estLpmInt )[3:5], xMeanInt[3:5], 1:3, c( -1, -1, 1, 0 ), 
+   model = "lpm" )
    effect      stdEr 
-0.2392568         NA 
> urbinEffCat( coef( estLpmInt ), xMeanInt, 3:5, c( -1, -1, 1, 0 ), 
+   model = "lpm" )
    effect      stdEr 
-0.2392568         NA 
> # effects calculated based on predicted values
> names( xMeanInt ) <- sub( "TRUE", "", names( coef( estLpmInt ) ) )
> df30.37 <- df38.44 <- df45.52 <- df53.60 <- as.data.frame( t( xMeanInt ) ) 
> df30.37[ , 3:5 ] <- c( TRUE, FALSE, FALSE )
> df38.44[ , 3:5 ] <- c( FALSE, TRUE, FALSE )
> df45.52[ , 3:5 ] <- c( FALSE, FALSE, FALSE )
> df53.60[ , 3:5 ] <- c( FALSE, FALSE, TRUE )
> predict( estLpmInt, newdata = df53.60 ) -
+   sum( Mroz87$age30.37 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estLpmInt, newdata = df30.37 ) -
+   sum( Mroz87$age38.44 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estLpmInt, newdata = df38.44 )
         1 
-0.2392568 
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estLpmInt )[3:5], xMeanIntShares3Attr, 1:3, c( -1, -1, 1, 0 ), 
+   model = "lpm" )
[1] -0.587822 -0.412178  1.000000
> urbinEffCat( coef( estLpmInt ), xMeanIntAttr, 3:5, c( -1, -1, 1, 0 ), 
+   model = "lpm" )
[1]  0.000000  0.000000 -0.587822 -0.412178  1.000000  0.000000
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffCat, t0 = coef( estLpmInt )[3:5], xPos = 1:3,
+   allXVal = xMeanInt[3:5], xGroups = c( -1, -1, 1, 0 ), model = "lpm" )
       age30.37TRUE age38.44TRUE age53.60TRUE
effect    -0.587822    -0.412178            1
stdEr            NA           NA           NA
> numericGradient( urbinEffCat, t0 = coef( estLpmInt ), xPos = 3:5,
+   allXVal = xMeanInt, xGroups = c( -1, -1, 1, 0 ), model = "lpm" )
       (Intercept) kids age30.37TRUE age38.44TRUE age53.60TRUE educ
effect           0    0    -0.587822    -0.412178            1    0
stdEr           NA   NA           NA           NA           NA   NA
> # with full covariance matrix
> urbinEffCat( coef( estLpmInt )[3:5], xMeanInt[3:5], 1:3, c( -1, -1, 1, 0 ), 
+   model = "lpm", vcov( estLpmInt )[3:5, 3:5] )
     effect       stdEr 
-0.23925675  0.06451259 
> urbinEffCat( coef( estLpmInt ), xMeanInt, 3:5, c( -1, -1, 1, 0 ), 
+   model = "lpm", vcov( estLpmInt ) )
     effect       stdEr 
-0.23925675  0.06451259 
> # with standard errors only
> urbinEffCat( coef( estLpmInt )[3:5], xMeanInt[3:5], 1:3, c( -1, -1, 1, 0 ), 
+   model = "lpm", sqrt( diag( vcov( estLpmInt ) ) )[3:5] )
     effect       stdEr 
-0.23925675  0.07043513 
> urbinEffCat( coef( estLpmInt ), xMeanInt, 3:5, c( -1, -1, 1, 0 ), 
+   model = "lpm", sqrt( diag( vcov( estLpmInt ) ) ) )
     effect       stdEr 
-0.23925675  0.07043513 
> ### effects of age changing from the 53-60 category to the 38-52 category
> # without standard errors
> urbinEffCat( coef( estLpmInt )[3:5], xMeanInt[3:5], 1:3, c( 0, 1, -1, 1 ), 
+   model = "lpm" )
   effect     stdEr 
0.2107741        NA 
> urbinEffCat( coef( estLpmInt ), xMeanInt, 3:5, c( 0, 1, -1, 1 ), 
+   model = "lpm" )
   effect     stdEr 
0.2107741        NA 
> # effects calculated based on predicted values
> sum( Mroz87$age38.44 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estLpmInt, newdata = df38.44 ) +
+   sum( Mroz87$age45.52 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estLpmInt, newdata = df45.52 ) -
+   predict( estLpmInt, newdata = df53.60 )
        1 
0.2107741 
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estLpmInt )[3:5], xMeanIntShares3Attr, 1:3, c( 0, 1, -1, 1 ), 
+   model = "lpm" )
[1]  0.0000000  0.4345679 -1.0000000
> urbinEffCat( coef( estLpmInt ), xMeanIntAttr, 3:5, c( 0, 1, -1, 1 ), 
+   model = "lpm" )
[1]  0.0000000  0.0000000  0.0000000  0.4345679 -1.0000000  0.0000000
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffCat, t0 = coef( estLpmInt )[3:5], xPos = 1:3,
+   allXVal = xMeanInt[3:5], xGroups = c( 0, 1, -1, 1 ), model = "lpm" )
       age30.37TRUE age38.44TRUE age53.60TRUE
effect            0    0.4345679           -1
stdEr            NA           NA           NA
> numericGradient( urbinEffCat, t0 = coef( estLpmInt ), xPos = 3:5,
+   allXVal = xMeanInt, xGroups = c( 0, 1, -1, 1 ), model = "lpm" )
       (Intercept) kids age30.37TRUE age38.44TRUE age53.60TRUE educ
effect           0    0            0    0.4345679           -1    0
stdEr           NA   NA           NA           NA           NA   NA
> # with full covariance matrix
> urbinEffCat( coef( estLpmInt )[3:5], xMeanInt[3:5], 1:3, c( 0, 1, -1, 1 ), 
+   model = "lpm", vcov( estLpmInt )[3:5,3:5] )
    effect      stdEr 
0.21077412 0.05990238 
> urbinEffCat( coef( estLpmInt ), xMeanInt, 3:5, c( 0, 1, -1, 1 ), 
+   model = "lpm", vcov( estLpmInt ) )
    effect      stdEr 
0.21077412 0.05990238 
> # with standard errors only
> urbinEffCat( coef( estLpmInt )[3:5], xMeanInt[3:5], 1:3, c( 0, 1, -1, 1 ), 
+   model = "lpm", sqrt( diag( vcov( estLpmInt ) ) )[3:5] )
    effect      stdEr 
0.21077412 0.06499097 
> urbinEffCat( coef( estLpmInt ), xMeanInt, 3:5, c( 0, 1, -1, 1 ), 
+   model = "lpm", sqrt( diag( vcov( estLpmInt ) ) ) )
    effect      stdEr 
0.21077412 0.06499097 
> 
> 
> proc.time()
   user  system elapsed 
  0.234   0.020   0.248 
