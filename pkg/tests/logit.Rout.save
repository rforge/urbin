
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
Loading required package: miscTools
> library( "maxLik" )

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library( "mfx" )
Loading required package: sandwich
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: MASS
Loading required package: betareg
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### linear in age
> estLogitLin <- glm( lfp ~ kids + age + educ, 
+   family = binomial(link = "logit"), 
+   data = Mroz87 )
> summary( estLogitLin )

Call:
glm(formula = lfp ~ kids + age + educ, family = binomial(link = "logit"), 
    data = Mroz87)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.8731  -1.2325   0.8026   1.0564   1.5875  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.11437    0.73459  -0.156  0.87628    
kids        -0.50349    0.19932  -2.526  0.01154 *  
age         -0.03108    0.01137  -2.734  0.00626 ** 
educ         0.16902    0.03505   4.822 1.42e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  993.53  on 749  degrees of freedom
AIC: 1001.5

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanLin <- c( 1, colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ) )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estLogitLin ), xMeanLin, xPos = 3, model = "logit" )
semEla.age      stdEr 
-0.3236826         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estLogitLin, 
+   newdata = as.data.frame( t( xMeanLin * c( 1, 1, 1.005, 1 ) ) ), 
+   type = "response" ) -
+     predict( estLogitLin, 
+       newdata = as.data.frame( t( xMeanLin * c( 1, 1, 0.995, 1 ) ) ), 
+       type = "response" ) )
         1 
-0.3236815 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanLinAttr <- xMeanLin
> attr( xMeanLinAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estLogitLin ), xMeanLinAttr, 3, seSimplify = FALSE, 
+   model = "logit" )
                   kids         age        educ 
 0.04658311  0.03241640 12.39574832  0.57235977 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEla, t0 = coef( estLogitLin ), 
+   allXVal = xMeanLin, xPos = 3, model = "logit" )
           (Intercept)      kids      age      educ
semEla.age  0.04658311 0.0324164 12.39575 0.5723598
stdEr               NA        NA       NA        NA
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLogitLin ), xMeanLinAttr, 3, model = "logit", 
+   seSimplify = TRUE )
[1]  0.0000  0.0000 10.4142  0.0000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit", 
+   vcov( estLogitLin ) )
semEla.age      stdEr 
-0.3236826  0.1183349 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit",
+   sqrt( diag( vcov( estLogitLin ) ) ), seSimplify = FALSE )
semEla.age      stdEr 
-0.3236826  0.1465392 
Warning message:
In urbinEla(coef(estLogitLin), xMeanLin, 3, model = "logit", sqrt(diag(vcov(estLogitLin))),  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit", 
+   sqrt( diag( vcov( estLogitLin ) ) ) )
semEla.age      stdEr 
-0.3236826  0.1183930 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> estLogitLinMfx <- logitmfx( lfp ~ kids + age + educ, data = Mroz87 )
> estLogitLinMfx$mfxest[ "age", 1:2 ] * xMeanLin[ "age" ]
     dF/dx  Std. Err. 
-0.3236826  0.1183349 
> 
> ### quadratic in age
> estLogitQuad <- glm( lfp ~ kids + age + I(age^2) + educ, 
+   family = binomial(link = "logit"), 
+   data = Mroz87 )
> summary( estLogitQuad )

Call:
glm(formula = lfp ~ kids + age + I(age^2) + educ, family = binomial(link = "logit"), 
    data = Mroz87)

Deviance Residuals: 
   Min      1Q  Median      3Q     Max  
-1.899  -1.232   0.789   1.051   1.650  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.943656   2.274121  -3.053 0.002263 ** 
kids        -0.702707   0.213342  -3.294 0.000988 ***
age          0.308023   0.107374   2.869 0.004122 ** 
I(age^2)    -0.003998   0.001262  -3.168 0.001534 ** 
educ         0.172295   0.035446   4.861 1.17e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  983.26  on 748  degrees of freedom
AIC: 993.26

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanQuad <- c( xMeanLin[ 1:3 ], xMeanLin[3]^2, xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit" )
semEla.age      stdEr 
-0.3171501         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estLogitQuad, 
+   newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 1.005, 1.005^2, 1 ) ) ), 
+   type = "response" ) -
+     predict( estLogitQuad, 
+       newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 0.995, 0.995^2, 1 ) ) ), 
+       type = "response" ) )
         1 
-0.3171646 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanQuadAttr <- xMeanQuad
> attr( xMeanQuadAttr, "derivOnly" ) <- 1 
> urbinEla( coef( estLogitQuad ), xMeanQuadAttr, c( 3, 4 ), model = "logit",
+   seSimplify = FALSE )
                     kids          age          age         educ 
  0.08534662   0.05939127  13.49480379 993.64781746   1.04864132 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEla, t0 = coef( estLogitQuad ), 
+   allXVal = xMeanQuad, xPos = c( 3, 4 ), model = "logit" )
           (Intercept)       kids     age I(age^2)     educ
semEla.age  0.08534662 0.05939127 13.4948 993.6476 1.048641
stdEr               NA         NA      NA       NA       NA
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLogitQuad ), xMeanQuadAttr, c( 3, 4 ), model = "logit",
+   seSimplify = TRUE )
[1]   0.000000   0.000000   9.864342 839.215794   0.000000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit", 
+   vcov( estLogitQuad ) )
semEla.age      stdEr 
-0.3171501  0.1125322 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit", 
+   sqrt( diag( vcov( estLogitQuad ) ) ), seSimplify = FALSE )
semEla.age      stdEr 
-0.3171501  1.9264975 
Warning messages:
1: In urbinEla(coef(estLogitQuad), xMeanQuad, c(3, 4), model = "logit",  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
2: In prepareVcov(allCoefVcov, length(allCoef), xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ) )
semEla.age      stdEr 
-0.3171501  1.4978695 
Warning message:
In prepareVcov(allCoefVcov, length(allCoef), xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> # approximate covariance between the coefficient of the linear term and 
> # the coefficient of the quadratic term based on the original data
> se <- sqrt( diag( vcov( estLogitQuad ) ) )
> X <- cbind( Mroz87$age, Mroz87$age^2, 1 )
> XXinv <- solve( t(X) %*% X )
> sigmaSq <- sqrt( ( se["age"]^2 / XXinv[1,1] ) * ( se["I(age^2)"]^2 / XXinv[2,2] ) )
> vcovApp <- diag( se^2 )
> rownames( vcovApp ) <- colnames( vcovApp ) <- names( se )
> vcovApp[ "age", "I(age^2)" ] <- vcovApp[ "I(age^2)", "age" ] <- 
+   sigmaSq * XXinv[1,2]
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit", 
+   vcovApp )
semEla.age      stdEr 
-0.3171501  0.3038854 
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit", 
+   vcovApp, seSimplify = TRUE )
 semEla.age       stdEr 
-0.31715014  0.09662784 
Warning message:
In urbinEla(coef(estLogitQuad), xMeanQuad, c(3, 4), model = "logit",  :
  if the (full) covariance matrix is provided via argument 'allCoefCov' it is NOT recommended to set argument 'seSimplify' to TRUE
> # approximate covariance between the coefficient of the linear term and 
> # the coefficient of the quadratic term based on simulated data
> se <- sqrt( diag( vcov( estLogitQuad ) ) )
> set.seed( 123 )
> x <- rnorm( 1000, xMeanQuad[ "age" ], sd( Mroz87$age ) )
> X <- cbind( x, x^2, 1 )
> XXinv <- solve( t(X) %*% X )
> sigmaSq <- sqrt( ( se["age"]^2 / XXinv[1,1] ) * ( se["I(age^2)"]^2 / XXinv[2,2] ) )
> vcovApp <- diag( se^2 )
> rownames( vcovApp ) <- colnames( vcovApp ) <- names( se )
> vcovApp[ "age", "I(age^2)" ] <- vcovApp[ "I(age^2)", "age" ] <- 
+   sigmaSq * XXinv[1,2]
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit", 
+   vcovApp )
semEla.age      stdEr 
-0.3171501  0.3273720 
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit", 
+   vcovApp, seSimplify = TRUE )
semEla.age      stdEr 
-0.3171501  0.1359782 
Warning message:
In urbinEla(coef(estLogitQuad), xMeanQuad, c(3, 4), model = "logit",  :
  if the (full) covariance matrix is provided via argument 'allCoefCov' it is NOT recommended to set argument 'seSimplify' to TRUE
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE )
semEla.age      stdEr 
-0.3171501  0.3273720 
Warning message:
In urbinEla(coef(estLogitQuad), xMeanQuad, c(3, 4), model = "logit",  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
semEla.age      stdEr 
-0.3171501  0.1359782 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> # (differs from the above, because mean(age)^2 is not the same as mean(age^2))
> estLogitQuadMfx <- logitmfx( lfp ~ kids + age + I(age^2) + educ, data = Mroz87 )
> estLogitQuadMfx$mfxest[ "age", 1:2 ] * xMeanQuad[ "age" ] +
+   2 * estLogitQuadMfx$mfxest[ "I(age^2)", 1:2 ] * xMeanQuad[ "age" ]^2
     dF/dx  Std. Err. 
-0.3347451  2.2359259 
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal( 
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estLogitInt <- glm( lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
+   family = binomial(link = "logit"), 
+   data = Mroz87 )
> summary( estLogitInt )

Call:
glm(formula = lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
    family = binomial(link = "logit"), data = Mroz87)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.8739  -1.2158   0.8047   1.0675   1.7220  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -1.44414    0.45478  -3.175  0.00150 ** 
kids         -0.60454    0.20798  -2.907  0.00365 ** 
age30.37TRUE  0.22077    0.20602   1.072  0.28391    
age38.44TRUE  0.19729    0.22027   0.896  0.37042    
age53.60TRUE -0.82706    0.26535  -3.117  0.00183 ** 
educ          0.17434    0.03537   4.930 8.24e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  987.04  on 747  degrees of freedom
AIC: 999.04

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanInt <- c( xMeanLin[1:2], mean( Mroz87$age30.37 ), 
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit" )
    semEla      stdEr 
-0.4749991         NA 
> # semi-elasticities based on numerical derivation
> Mroz87Lower <- Mroz87
> Mroz87Lower$age <- Mroz87$age * 0.95
> Mroz87Lower$age30.37 <- Mroz87Lower$age <= 37.5
> Mroz87Lower$age38.44 <- Mroz87Lower$age > 37.5 & Mroz87Lower$age <= 44.5
> Mroz87Lower$age45.52 <- Mroz87Lower$age > 44.5 & Mroz87Lower$age <= 52.5
> Mroz87Lower$age53.60 <- Mroz87Lower$age > 52.5 
> all.equal( 
+   Mroz87Lower$age30.37 + Mroz87Lower$age38.44 + Mroz87Lower$age45.52 + 
+     Mroz87Lower$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> Mroz87Upper <- Mroz87
> Mroz87Upper$age <- Mroz87$age * 1.05
> Mroz87Upper$age30.37 <- Mroz87Upper$age <= 37.5
> Mroz87Upper$age38.44 <- Mroz87Upper$age > 37.5 & Mroz87Upper$age <= 44.5
> Mroz87Upper$age45.52 <- Mroz87Upper$age > 44.5 & Mroz87Upper$age <= 52.5
> Mroz87Upper$age53.60 <- Mroz87Upper$age > 52.5 
> all.equal( 
+   Mroz87Upper$age30.37 + Mroz87Upper$age38.44 + Mroz87Upper$age45.52 + 
+     Mroz87Upper$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> 10 * mean( predict( estLogitInt, newdata = Mroz87Upper, type = "response" ) -
+   predict( estLogitInt, newdata = Mroz87Lower, type = "response" ) )
[1] -0.3509701
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanIntAttr <- xMeanInt
> attr( xMeanIntAttr, "derivOnly" ) <- 1 
> urbinElaInt( coef( estLogitInt ), xMeanIntAttr,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit" )
[1] -0.008028212 -0.005586697 -0.547491063  0.173305967  0.441473157
[6] -0.098641458
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinElaInt, t0 = coef( estLogitInt ), allXVal = xMeanInt,
+   xPos = c( 3, 4, 0, 5 ), xBound = c( 30, 37.5, 44.5, 52.5, 60 ),
+   model = "logit" )
        (Intercept)         kids age30.37TRUE age38.44TRUE age53.60TRUE
semEla -0.008028212 -0.005586697   -0.5474911     0.173306    0.4414732
stdEr            NA           NA           NA           NA           NA
              educ
semEla -0.09864146
stdEr           NA
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit",
+   allCoefVcov = vcov( estLogitInt ) )
    semEla      stdEr 
-0.4749991  0.1382677 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit",
+   allCoefVcov = sqrt( diag( vcov( estLogitInt ) ) ) )
    semEla      stdEr 
-0.4749991  0.1671207 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1:2 ], NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estLogitLin ), allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit" )
    effect      stdEr 
-0.1524657         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> predict( estLogitLin, 
+   newdata = as.data.frame( t( replace( xMeanLin, 3, 55 ) ) ), 
+   type = "response" ) -
+   predict( estLogitLin, 
+     newdata = as.data.frame( t( replace( xMeanLin, 3, 35 ) ) ), 
+     type = "response" )
         1 
-0.1524657 
> # partial derivatives of the semi-elasticity wrt the coefficients
> xMeanLinIntAttr <- xMeanLinInt
> attr( xMeanLinIntAttr, "derivOnly" ) <- 1 
> urbinEffInt( coef( estLogitLin ), xMeanLinIntAttr, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "logit" )
[1] 0.01581969 0.01100865 5.54182737 0.19437417
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( urbinEffInt, t0 = coef( estLogitLin ),
+   allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit" )
       (Intercept)       kids      age      educ
effect  0.01581969 0.01100865 5.541827 0.1943742
stdEr           NA         NA       NA        NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estLogitLin ), xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "logit", allCoefVcov = vcov( estLogitLin ) )
    effect      stdEr 
-0.1524657  0.0553270 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estLogitLin ), allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit", 
+   allCoefVcov = sqrt( diag( vcov( estLogitLin ) ) ) )
     effect       stdEr 
-0.15246566  0.06446329 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear and quadratic explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[ 1:2 ], NA, NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estLogitQuad ), allXVal = xMeanQuadInt, 
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "logit" )
    effect      stdEr 
-0.2535377         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> predict( estLogitQuad, 
+   newdata = as.data.frame( t( replace( xMeanQuad, 3:4, c( 55, 55^2 ) ) ) ), 
+   type = "response" ) -
+   predict( estLogitQuad, 
+     newdata = as.data.frame( t( replace( xMeanQuad, 3:4, c( 35, 35^2 ) ) ) ), 
+     type = "response" )
         1 
-0.2534117 
> # partial derivatives of the effect wrt the coefficients
> xMeanQuadIntAttr <- xMeanQuadInt
> attr( xMeanQuadIntAttr, "derivOnly" ) <- 1 
> urbinEffInt( coef( estLogitQuad ), xMeanQuadIntAttr, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "logit" )
[1] 1.806166e-03 1.256881e-03 4.759617e+00 4.249037e+02 2.219210e-02
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbinEffInt, t0 = coef( estLogitQuad ),
+   allXVal = xMeanQuadInt, xPos = c( 3, 4 ),
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit" )
       (Intercept)        kids      age I(age^2)      educ
effect 0.001806166 0.001256881 4.759617 424.9036 0.0221921
stdEr           NA          NA       NA       NA        NA
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estLogitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "logit", 
+   allCoefVcov = vcov( estLogitQuad ) )
     effect       stdEr 
-0.25353772  0.06224043 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estLogitQuad ), allXVal = xMeanQuadInt, 
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "logit", allCoefVcov = sqrt( diag( vcov( estLogitQuad ) ) ) )
    effect      stdEr 
-0.2535377  0.7407856 
Warning message:
In prepareVcov(allCoefVcov, nCoef, xPos, xMeanSd) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (standard errors + mean value and standard deviation of age)
> urbinEffInt( coef( estLogitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "logit", 
+   allCoefVcov = sqrt( diag( vcov( estLogitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.25353772  0.07189688 
> 
> ### grouping and re-basing categorical variables
> ### effects of age changing from the 30-44 category to the 53-60 category
> # without standard errors
> coefLogitInt <- coef( estLogitInt )
> coefLogitInt <- c( coefLogitInt[1:5], 0, coefLogitInt[6] )
> xMeanIntShares <- c( xMeanInt[1:5], 1-sum( xMeanInt[3:5] ), xMeanInt[6] )
> urbin:::logitEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ),
+   model = "logit" )
    effect      stdEr 
-0.2538074         NA 
> # effects calculated based on predicted values
> names( xMeanInt ) <- sub( "TRUE", "", names( coef( estLogitInt ) ) )
> df30.37 <- df38.44 <- df45.52 <- df53.60 <- as.data.frame( t( xMeanInt ) ) 
> df30.37[ , 3:5 ] <- c( TRUE, FALSE, FALSE )
> df38.44[ , 3:5 ] <- c( FALSE, TRUE, FALSE )
> df45.52[ , 3:5 ] <- c( FALSE, FALSE, FALSE )
> df53.60[ , 3:5 ] <- c( FALSE, FALSE, TRUE )
> predict( estLogitInt, newdata = df53.60, type = "response" ) -
+   sum( Mroz87$age30.37 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estLogitInt, newdata = df30.37, type = "response" ) -
+   sum( Mroz87$age38.44 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estLogitInt, newdata = df38.44, type = "response" )
         1 
-0.2538037 
> # partial derivatives of the effect wrt the coefficients
> urbin:::logitEffCat( coef( estLogitInt ), xMeanIntAttr, c( 3:5 ),
+   c( -1, -1, 1, 0 ), model = "logit" )
[1] -0.003641672 -0.002534178 -0.138528966 -0.097135849  0.232023143
[6] -0.044744687
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbin:::logitEffCat, t0 = coef( estLogitInt ),
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ),
+   model = "logit" )
        (Intercept)         kids age30.37TRUE age38.44TRUE age53.60TRUE
effect -0.003641672 -0.002534178    -0.138529  -0.09713585    0.2320231
stdEr            NA           NA           NA           NA           NA
              educ
effect -0.04474469
stdEr           NA
> # with full covariance matrix
> urbin:::logitEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ),
+   allCoefVcov = vcov( estLogitInt ), model = "logit" )
     effect       stdEr 
-0.25380744  0.06582802 
> # with standard errors only
> urbin:::logitEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ),
+   allCoefVcov = sqrt( diag( vcov( estLogitInt ) ) ), model = "logit" )
     effect       stdEr 
-0.25380744  0.07119196 
> ### effects of age changing from the 53-60 category to the 38-52 category
> # without standard errors
> urbin:::logitEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ), 
+   model = "logit" )
   effect     stdEr 
0.2238558        NA 
> # effects calculated based on predicted values
> sum( Mroz87$age38.44 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estLogitInt, newdata = df38.44, type = "response" ) +
+   sum( Mroz87$age45.52 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estLogitInt, newdata = df45.52, type = "response" ) -
+   predict( estLogitInt, newdata = df53.60, type = "response" )
        1 
0.2236439 
> # partial derivatives of the effect wrt the coefficients
> urbin:::logitEffCat( coef( estLogitInt ), xMeanIntAttr, c( 3:5 ),
+   c( 0, 1, -1, 1 ), model = "logit" )
[1]  0.009916771  0.006900914  0.000000000  0.105139321 -0.232023143
[6]  0.121845902
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( urbin:::logitEffCat, t0 = coef( estLogitInt ),
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( 0, 1, -1, 1 ), 
+   model = "logit" )
       (Intercept)        kids age30.37TRUE age38.44TRUE age53.60TRUE      educ
effect 0.009916771 0.006900914            0    0.1051393   -0.2320231 0.1218459
stdEr           NA          NA           NA           NA           NA        NA
> # with full covariance matrix
> urbin:::logitEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ),
+   allCoefVcov = vcov( estLogitInt ), model = "logit" )
    effect      stdEr 
0.22385578 0.06109041 
> # with standard errors only
> urbin:::logitEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ),
+   allCoefVcov = sqrt( diag( vcov( estLogitInt ) ) ), model = "logit" )
    effect      stdEr 
0.22385578 0.06608907 
> 
> 
> proc.time()
   user  system elapsed 
  0.532   0.023   0.549 
