
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
> maxLikLoaded <- require( "maxLik" )
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> mfxLoaded <- require( "mfx" )
Loading required package: mfx
Loading required package: sandwich
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: MASS
Loading required package: betareg
> if( !require( "sampleSelection" ) ) {
+   q( save = "no" )
+ }
Loading required package: sampleSelection
> options( digits = 4 )
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### linear in age
> estLogitLin <- glm( lfp ~ kids + age + educ,
+   family = binomial(link = "logit"),
+   data = Mroz87 )
> summary( estLogitLin )

Call:
glm(formula = lfp ~ kids + age + educ, family = binomial(link = "logit"), 
    data = Mroz87)

Deviance Residuals: 
   Min      1Q  Median      3Q     Max  
-1.873  -1.232   0.803   1.056   1.587  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -0.1144     0.7346   -0.16   0.8763    
kids         -0.5035     0.1993   -2.53   0.0115 *  
age          -0.0311     0.0114   -2.73   0.0063 ** 
educ          0.1690     0.0351    4.82  1.4e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  993.53  on 749  degrees of freedom
AIC: 1002

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanLin <- c( 1, colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ) )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estLogitLin ), xMeanLin, xPos = 3, model = "logit" )
 semEla   stdEr 
-0.3237      NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estLogitLin,
+   newdata = as.data.frame( t( xMeanLin * c( 1, 1, 1.005, 1 ) ) ),
+   type = "response" ) -
+     predict( estLogitLin,
+       newdata = as.data.frame( t( xMeanLin * c( 1, 1, 0.995, 1 ) ) ),
+       type = "response" ) )
      1 
-0.3237 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLogitLin ), xMeanLin, 3, seSimplify = FALSE,
+   model = "logit" )$derivCoef
             kids      age     educ 
 0.04658  0.03242 12.39575  0.57236 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla },
+     t0 = coef( estLogitLin ),
+     allXVal = xMeanLin, xPos = 3, model = "logit" ) )
+ }
     (Intercept)    kids  age   educ
[1,]     0.04658 0.03242 12.4 0.5724
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit",
+   seSimplify = TRUE )$derivCoef
[1]  0.00  0.00 10.41  0.00
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit",
+   vcov( estLogitLin ) )
 semEla   stdEr 
-0.3237  0.1183 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit",
+   sqrt( diag( vcov( estLogitLin ) ) ), seSimplify = FALSE )
 semEla   stdEr 
-0.3237  0.1465 
Warning message:
In urbinEla(coef(estLogitLin), xMeanLin, 3, model = "logit", sqrt(diag(vcov(estLogitLin))),  :
  the returned standard error is likely very imprecise; you can provide the full covariance matrix via argument 'allCoefVcov' or do NOT set argument 'seSimplify' to FALSE to obtain a more precise standard error
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estLogitLin ), xMeanLin, 3, model = "logit",
+   sqrt( diag( vcov( estLogitLin ) ) ) )
 semEla   stdEr 
-0.3237  0.1184 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> if( mfxLoaded ) {
+   estLogitLinMfx <- logitmfx( lfp ~ kids + age + educ, data = Mroz87 )
+   print( estLogitLinMfx$mfxest[ "age", 1:2 ] * xMeanLin[ "age" ] )
+ }
    dF/dx Std. Err. 
  -0.3237    0.1183 
> if( mfxLoaded ) {
+   print( urbinEla( estLogitLinMfx$mfxest[ "age", 1 ], xMeanLin["age"], 1, iPos = 0,
+     model = "lpm", estLogitLinMfx$mfxest[ "age", 2 ] ) )
+ }
 semEla   stdEr 
-0.3237  0.1183 
> if( mfxLoaded ) {
+   print( urbinEla( estLogitLinMfx$mfxest[ , 1 ], xMeanLin[-1], 2, iPos = 0,
+     model = "lpm", estLogitLinMfx$mfxest[ , 2 ] ) )
+ }
 semEla   stdEr 
-0.3237  0.1183 
> 
> 
> ### quadratic in age
> estLogitQuad <- glm( lfp ~ kids + age + I(age^2) + educ,
+   family = binomial(link = "logit"),
+   data = Mroz87 )
> summary( estLogitQuad )

Call:
glm(formula = lfp ~ kids + age + I(age^2) + educ, family = binomial(link = "logit"), 
    data = Mroz87)

Deviance Residuals: 
   Min      1Q  Median      3Q     Max  
-1.899  -1.232   0.789   1.051   1.649  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.94366    2.27412   -3.05  0.00226 ** 
kids        -0.70271    0.21334   -3.29  0.00099 ***
age          0.30802    0.10737    2.87  0.00412 ** 
I(age^2)    -0.00400    0.00126   -3.17  0.00153 ** 
educ         0.17229    0.03545    4.86  1.2e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  983.26  on 748  degrees of freedom
AIC: 993.3

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanQuad <- c( xMeanLin[ 1:3 ], xMeanLin[3]^2, xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit" )
 semEla   stdEr 
-0.3172      NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( predict( estLogitQuad,
+   newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 1.005, 1.005^2, 1 ) ) ),
+   type = "response" ) -
+     predict( estLogitQuad,
+       newdata = as.data.frame( t( xMeanQuad * c( 1, 1, 0.995, 0.995^2, 1 ) ) ),
+       type = "response" ) )
      1 
-0.3172 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   seSimplify = FALSE )$derivCoef
               kids       age       age      educ 
  0.08535   0.05939  13.49480 993.64782   1.04864 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla },
+     t0 = coef( estLogitQuad ),
+     allXVal = xMeanQuad, xPos = c( 3, 4 ), model = "logit" ) )
+ }
     (Intercept)    kids   age I(age^2)  educ
[1,]     0.08535 0.05939 13.49    993.6 1.049
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   seSimplify = TRUE )$derivCoef
[1]   0.000   0.000   9.864 839.216   0.000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   vcov( estLogitQuad ) )
 semEla   stdEr 
-0.3172  0.1125 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ), seSimplify = FALSE )
 semEla   stdEr 
-0.3172  1.9265 
Warning messages:
1: In urbinEla(coef(estLogitQuad), xMeanQuad, c(3, 4), model = "logit",  :
  the returned standard error is likely very imprecise; you can provide the full covariance matrix via argument 'allCoefVcov' or do NOT set argument 'seSimplify' to FALSE to obtain a more precise standard error
2: In urbinEla(allCoef = coef(estLogitQuad), allXVal = xMeanQuad, xPos = c(3, 4), model = "logit", allCoefVcov = sqrt(diag(vcov(estLogitQuad))), seSimplify = FALSE) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ) )
 semEla   stdEr 
-0.3172  1.4979 
Warning message:
In urbinEla(allCoef = coef(estLogitQuad), allXVal = xMeanQuad, xPos = c(3, 4), model = "logit", allCoefVcov = sqrt(diag(vcov(estLogitQuad)))) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE )
  semEla    stdEr 
-0.31715  0.09913 
Warning message:
In urbinEla(coef(estLogitQuad), xMeanQuad, c(3, 4), model = "logit",  :
  the returned standard error is likely very imprecise; you can provide the full covariance matrix via argument 'allCoefVcov' or do NOT set argument 'seSimplify' to FALSE to obtain a more precise standard error
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd, simplified)
> urbinEla( coef( estLogitQuad ), xMeanQuad, c( 3, 4 ), model = "logit",
+   sqrt( diag( vcov( estLogitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
 semEla   stdEr 
-0.3172  0.1360 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> # (differs from the above, because mean(age)^2 is not the same as mean(age^2))
> if( mfxLoaded ) {
+   estLogitQuadMfx <- logitmfx( lfp ~ kids + age + I(age^2) + educ, data = Mroz87 )
+   print( estLogitQuadMfx$mfxest[ "age", 1:2 ] * xMeanQuad[ "age" ] +
+     2 * estLogitQuadMfx$mfxest[ "I(age^2)", 1:2 ] * xMeanQuad[ "age" ]^2 )
+ }
    dF/dx Std. Err. 
  -0.3347    2.2359 
> if( mfxLoaded ) {
+   print( urbinEla( estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 1 ],
+     xMeanQuad["age"], 1:2, iPos = 0,
+     model = "lpm", estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 2 ] ) )
+ }
 semEla   stdEr 
-0.3347  1.5810 
Warning message:
In urbinEla(allCoef = estLogitQuadMfx$mfxest[c("age", "I(age^2)"), 1], allXVal = xMeanQuad["age"], xPos = 1:2, model = "lpm", allCoefVcov = estLogitQuadMfx$mfxest[c("age", "I(age^2)"), 2], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> if( mfxLoaded ) {
+   print( urbinEla( estLogitQuadMfx$mfxest[  , 1 ],
+     xMeanQuad[-1], 2:3, iPos = 0,
+     model = "lpm", estLogitQuadMfx$mfxest[ , 2 ] ) )
+ }
 semEla   stdEr 
-0.3347  1.5810 
Warning message:
In urbinEla(allCoef = estLogitQuadMfx$mfxest[, 1], allXVal = xMeanQuad[-1], xPos = 2:3, model = "lpm", allCoefVcov = estLogitQuadMfx$mfxest[, 2], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> if( mfxLoaded ) {
+   print( urbinEla( estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 1 ],
+     xMeanQuad["age"], 1:2, iPos = 0,
+     model = "lpm", estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 2 ],
+     xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) ) )
+ }
 semEla   stdEr 
-0.3347  0.1435 
> if( mfxLoaded ) {
+   print( urbinEla( estLogitQuadMfx$mfxest[  , 1 ],
+     xMeanQuad[-1], 2:3, iPos = 0,
+     model = "lpm", estLogitQuadMfx$mfxest[ , 2 ],
+     xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) ) )
+ }
 semEla   stdEr 
-0.3347  0.1435 
> 
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal(
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estLogitInt <- glm( lfp ~ kids + age30.37 + age38.44 + age53.60 + educ,
+   family = binomial(link = "logit"),
+   data = Mroz87 )
> summary( estLogitInt )

Call:
glm(formula = lfp ~ kids + age30.37 + age38.44 + age53.60 + educ, 
    family = binomial(link = "logit"), data = Mroz87)

Deviance Residuals: 
   Min      1Q  Median      3Q     Max  
-1.874  -1.216   0.805   1.067   1.722  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)   -1.4441     0.4548   -3.18   0.0015 ** 
kids          -0.6045     0.2080   -2.91   0.0037 ** 
age30.37TRUE   0.2208     0.2060    1.07   0.2839    
age38.44TRUE   0.1973     0.2203    0.90   0.3704    
age53.60TRUE  -0.8271     0.2653   -3.12   0.0018 ** 
educ           0.1743     0.0354    4.93  8.2e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1029.75  on 752  degrees of freedom
Residual deviance:  987.04  on 747  degrees of freedom
AIC: 999

Number of Fisher Scoring iterations: 4

> # mean values of the explanatory variables
> xMeanInt <- c( xMeanLin[1:2], mean( Mroz87$age30.37 ),
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit" )
 semEla   stdEr 
-0.3777      NA 
> # semi-elasticities based on numerical derivation
> Mroz87Lower <- Mroz87
> Mroz87Lower$age <- Mroz87$age * 0.95
> Mroz87Lower$age30.37 <- Mroz87Lower$age <= 37.5
> Mroz87Lower$age38.44 <- Mroz87Lower$age > 37.5 & Mroz87Lower$age <= 44.5
> Mroz87Lower$age45.52 <- Mroz87Lower$age > 44.5 & Mroz87Lower$age <= 52.5
> Mroz87Lower$age53.60 <- Mroz87Lower$age > 52.5
> all.equal(
+   Mroz87Lower$age30.37 + Mroz87Lower$age38.44 + Mroz87Lower$age45.52 +
+     Mroz87Lower$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> Mroz87Upper <- Mroz87
> Mroz87Upper$age <- Mroz87$age * 1.05
> Mroz87Upper$age30.37 <- Mroz87Upper$age <= 37.5
> Mroz87Upper$age38.44 <- Mroz87Upper$age > 37.5 & Mroz87Upper$age <= 44.5
> Mroz87Upper$age45.52 <- Mroz87Upper$age > 44.5 & Mroz87Upper$age <= 52.5
> Mroz87Upper$age53.60 <- Mroz87Upper$age > 52.5
> all.equal(
+   Mroz87Upper$age30.37 + Mroz87Upper$age38.44 + Mroz87Upper$age45.52 +
+     Mroz87Upper$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> 10 * mean( predict( estLogitInt, newdata = Mroz87Upper, type = "response" ) -
+   predict( estLogitInt, newdata = Mroz87Lower, type = "response" ) )
[1] -0.351
> Mroz87LowerMean <- Mroz87Lower
> Mroz87UpperMean <- Mroz87Upper
> Mroz87LowerMean$kids <- Mroz87UpperMean$kids <- xMeanInt[ "kids" ]
> Mroz87LowerMean$educ <- Mroz87UpperMean$educ <- xMeanInt[ "educ" ]
> 10 * mean( predict( estLogitInt, newdata = Mroz87UpperMean, type = "response" ) -
+     predict( estLogitInt, newdata = Mroz87LowerMean, type = "response" ) )
[1] -0.3688
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit" )$derivCoef
[1] -0.003229 -0.002247 -0.343126 -0.030585  0.336143 -0.039678
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinElaInt( x, ... )$semEla },
+     t0 = coef( estLogitInt ), allXVal = xMeanInt,
+     xPos = c( 3, 4, 0, 5 ), xBound = c( 30, 37.5, 44.5, 52.5, 60 ),
+     model = "logit" ) )
+ }
     (Intercept)      kids age30.37TRUE age38.44TRUE age53.60TRUE     educ
[1,]   -0.003229 -0.002247      -0.3431     -0.03058       0.3361 -0.03968
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit",
+   allCoefVcov = vcov( estLogitInt ) )
 semEla   stdEr 
-0.3777  0.1017 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinElaInt( coef( estLogitInt ), xMeanInt,
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "logit",
+   allCoefVcov = sqrt( diag( vcov( estLogitInt ) ) ) )
 semEla   stdEr 
-0.3777  0.1140 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> if( mfxLoaded ) {
+   estLogitIntMfx <- logitmfx( lfp ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     data = Mroz87 )
+   print( urbinElaInt( estLogitIntMfx$mfxest[ 2:4, 1 ], xMeanInt[ 3:5 ],
+     c( 1, 2, 0, 3 ), iPos = 0, c( 30, 37.5, 44.5, 52.5, 60 ), model = "lpm",
+     estLogitIntMfx$mfxest[ 2:4, 2 ] ) )
+ }
 semEla   stdEr 
-0.3799  0.1173 
> if( mfxLoaded ) {
+   print( urbinElaInt( estLogitIntMfx$mfxest[ , 1 ], xMeanInt[ -1 ],
+     c( 2, 3, 0, 4 ), iPos = 0, c( 30, 37.5, 44.5, 52.5, 60 ), model = "lpm",
+     estLogitIntMfx$mfxest[ , 2 ] ) )
+ }
 semEla   stdEr 
-0.3799  0.1173 
> 
> 
> ### effect of age changing between discrete intervals
> ### if age is used as linear explanatory variable
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1:2 ], NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estLogitLin ), allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit" )
 effect   stdEr 
-0.1525      NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> predict( estLogitLin,
+   newdata = as.data.frame( t( replace( xMeanLin, 3, 55 ) ) ),
+   type = "response" ) -
+   predict( estLogitLin,
+     newdata = as.data.frame( t( replace( xMeanLin, 3, 35 ) ) ),
+     type = "response" )
      1 
-0.1525 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEffInt( coef( estLogitLin ), xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "logit" )$derivCoef
[1] 0.01582 0.01101 5.54183 0.19437
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect },
+     t0 = coef( estLogitLin ),
+     allXVal = xMeanLinInt, xPos = 3,
+     refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit" ) )
+ }
     (Intercept)    kids   age   educ
[1,]     0.01582 0.01101 5.542 0.1944
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix)
> urbinEffInt( coef( estLogitLin ), xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "logit", allCoefVcov = vcov( estLogitLin ) )
  effect    stdEr 
-0.15247  0.05533 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors)
> urbinEffInt( coef( estLogitLin ), allXVal = xMeanLinInt, xPos = 3,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit",
+   allCoefVcov = sqrt( diag( vcov( estLogitLin ) ) ) )
  effect    stdEr 
-0.15247  0.06446 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> if( mfxLoaded ) {
+   print( urbinEffInt( estLogitLinMfx$mfxest[ "age", 1 ], NULL, 1, iPos = 0,
+     c( 30, 40 ), c( 50, 60 ), model = "lpm",
+     estLogitLinMfx$mfxest[ "age", 2 ] ) )
+ }
  effect    stdEr 
-0.15219  0.05564 
> if( mfxLoaded ) {
+   print( urbinEffInt( estLogitLinMfx$mfxest[ , 1 ], NULL, 2, iPos = 0,
+     c( 30, 40 ), c( 50, 60 ), model = "lpm",
+     estLogitLinMfx$mfxest[ , 2 ] ) )
+ }
  effect    stdEr 
-0.15219  0.05564 
> 
> 
> ### effect of age changing between discrete intervals
> ### if age is used as linear and quadratic explanatory variable
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[ 1:2 ], NA, NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estLogitQuad ), allXVal = xMeanQuadInt,
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ),
+   model = "logit" )
 effect   stdEr 
-0.2535      NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> predict( estLogitQuad,
+   newdata = as.data.frame( t( replace( xMeanQuad, 3:4, c( 55, 55^2 ) ) ) ),
+   type = "response" ) -
+   predict( estLogitQuad,
+     newdata = as.data.frame( t( replace( xMeanQuad, 3:4, c( 35, 35^2 ) ) ) ),
+     type = "response" )
      1 
-0.2534 
> # partial derivatives of the effect wrt the coefficients
> urbinEffInt( coef( estLogitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "logit" )$derivCoef
[1] 1.806e-03 1.257e-03 4.760e+00 4.249e+02 2.219e-02
> # numerically computed partial derivatives of the effect wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect },
+     t0 = coef( estLogitQuad ),
+     allXVal = xMeanQuadInt, xPos = c( 3, 4 ),
+     refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "logit" ) )
+ }
     (Intercept)     kids  age I(age^2)    educ
[1,]    0.001806 0.001257 4.76    424.9 0.02219
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix)
> urbinEffInt( coef( estLogitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "logit",
+   allCoefVcov = vcov( estLogitQuad ) )
  effect    stdEr 
-0.25354  0.06224 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors)
> urbinEffInt( coef( estLogitQuad ), allXVal = xMeanQuadInt,
+   xPos = c( 3, 4 ), refBound = c( 30, 40 ), intBound = c( 50, 60 ),
+   model = "logit", allCoefVcov = sqrt( diag( vcov( estLogitQuad ) ) ) )
 effect   stdEr 
-0.2535  0.7408 
Warning message:
In urbinEffInt(allCoef = coef(estLogitQuad), allXVal = xMeanQuadInt, xPos = c(3, 4), refBound = c(30, 40), intBound = c(50, 60), model = "logit", allCoefVcov = sqrt(diag(vcov(estLogitQuad)))) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (standard errors + mean value and standard deviation of age)
> urbinEffInt( coef( estLogitQuad ), xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "logit",
+   allCoefVcov = sqrt( diag( vcov( estLogitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
  effect    stdEr 
-0.25354  0.07205 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> if( mfxLoaded ) {
+   print( urbinEffInt( estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 1 ], NULL, 1:2,
+     iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm",
+     estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 2 ] ) )
+ }
 effect   stdEr 
-0.2538  0.7652 
Warning message:
In urbinEffInt(allCoef = estLogitQuadMfx$mfxest[c("age", "I(age^2)"), 1], allXVal = NULL, xPos = 1:2, refBound = c(30, 40), intBound = c(50, 60), model = "lpm", allCoefVcov = estLogitQuadMfx$mfxest[c("age", "I(age^2)"), 2], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> if( mfxLoaded ) {
+   print( urbinEffInt( estLogitQuadMfx$mfxest[ , 1 ], NULL, 2:3,
+     iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm",
+     estLogitQuadMfx$mfxest[ , 2 ] ) )
+ }
 effect   stdEr 
-0.2538  0.7652 
Warning message:
In urbinEffInt(allCoef = estLogitQuadMfx$mfxest[, 1], allXVal = NULL, xPos = 2:3, refBound = c(30, 40), intBound = c(50, 60), model = "lpm", allCoefVcov = estLogitQuadMfx$mfxest[, 2], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> if( mfxLoaded ) {
+   print( urbinEffInt( estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 1 ], NULL, 1:2,
+     iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm",
+     estLogitQuadMfx$mfxest[ c( "age", "I(age^2)" ), 2 ],
+     xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) ) )
+ }
  effect    stdEr 
-0.25377  0.07577 
> if( mfxLoaded ) {
+   print( urbinEffInt( estLogitQuadMfx$mfxest[ , 1 ], NULL, 2:3,
+     iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm",
+     estLogitQuadMfx$mfxest[ , 2 ],
+     xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) ) )
+ }
  effect    stdEr 
-0.25377  0.07577 
> 
> 
> ### grouping and re-basing categorical variables
> ### effects of age changing from the 30-44 category to the 53-60 category
> # without standard errors
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ),
+   model = "logit" )
 effect   stdEr 
-0.2538      NA 
> # effects calculated based on predicted values
> names( xMeanInt ) <- sub( "TRUE", "", names( coef( estLogitInt ) ) )
> df30.37 <- df38.44 <- df45.52 <- df53.60 <- as.data.frame( t( xMeanInt ) )
> df30.37[ , 3:5 ] <- c( TRUE, FALSE, FALSE )
> df38.44[ , 3:5 ] <- c( FALSE, TRUE, FALSE )
> df45.52[ , 3:5 ] <- c( FALSE, FALSE, FALSE )
> df53.60[ , 3:5 ] <- c( FALSE, FALSE, TRUE )
> predict( estLogitInt, newdata = df53.60, type = "response" ) -
+   sum( Mroz87$age30.37 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estLogitInt, newdata = df30.37, type = "response" ) -
+   sum( Mroz87$age38.44 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estLogitInt, newdata = df38.44, type = "response" )
      1 
-0.2538 
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ),
+   c( -1, -1, 1, 0 ), model = "logit" )$derivCoef
[1] -0.003642 -0.002534 -0.138529 -0.097136  0.232023 -0.044745
> # numerically computed partial derivatives of the effect wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect },
+     t0 = coef( estLogitInt ),
+     allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ),
+     model = "logit" ) )
+ }
     (Intercept)      kids age30.37TRUE age38.44TRUE age53.60TRUE     educ
[1,]   -0.003642 -0.002534      -0.1385     -0.09714        0.232 -0.04474
> # with full covariance matrix
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ),
+   allCoefVcov = vcov( estLogitInt ), model = "logit" )
  effect    stdEr 
-0.25381  0.06583 
> # with standard errors only
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ),
+   allCoefVcov = sqrt( diag( vcov( estLogitInt ) ) ), model = "logit" )
  effect    stdEr 
-0.25381  0.07119 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> if( mfxLoaded ) {
+   print( urbinEffCat( estLogitIntMfx$mfxest[ 2:4, 1 ], xMeanInt[ 3:5 ], c(1:3),
+     c( -1, -1, 1, 0 ), iPos = 0, model = "lpm", estLogitIntMfx$mfxest[ 2:4, 2 ] ) )
+ }
  effect    stdEr 
-0.25514  0.07315 
> if( mfxLoaded ) {
+   print( urbinEffCat( estLogitIntMfx$mfxest[ , 1 ], xMeanInt[ -1 ], c(2:4),
+     c( -1, -1, 1, 0 ), iPos = 0, model = "lpm", estLogitIntMfx$mfxest[ , 2 ] ) )
+ }
  effect    stdEr 
-0.25514  0.07315 
> 
> 
> ### effects of age changing from the 53-60 category to the 38-52 category
> # without standard errors
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ),
+   model = "logit" )
effect  stdEr 
0.2239     NA 
> # effects calculated based on predicted values
> sum( Mroz87$age38.44 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estLogitInt, newdata = df38.44, type = "response" ) +
+   sum( Mroz87$age45.52 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estLogitInt, newdata = df45.52, type = "response" ) -
+   predict( estLogitInt, newdata = df53.60, type = "response" )
     1 
0.2236 
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ),
+   c( 0, 1, -1, 1 ), model = "logit" )$derivCoef
[1]  0.009917  0.006901  0.000000  0.105139 -0.232023  0.121846
> # numerically computed partial derivatives of the effect wrt the coefficients
> if( maxLikLoaded ) {
+   print( numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect },
+     t0 = coef( estLogitInt ),
+     allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( 0, 1, -1, 1 ),
+     model = "logit" ) )
+ }
     (Intercept)     kids age30.37TRUE age38.44TRUE age53.60TRUE   educ
[1,]    0.009917 0.006901            0       0.1051       -0.232 0.1218
> # with full covariance matrix
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ),
+   allCoefVcov = vcov( estLogitInt ), model = "logit" )
 effect   stdEr 
0.22386 0.06109 
> # with standard errors only
> urbinEffCat( coef( estLogitInt ), xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ),
+   allCoefVcov = sqrt( diag( vcov( estLogitInt ) ) ), model = "logit" )
 effect   stdEr 
0.22386 0.06609 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> if( mfxLoaded ) {
+   print( urbinEffCat( estLogitIntMfx$mfxest[ 2:4, 1 ], xMeanInt[ 3:5 ], c(1:3),
+     c( 0, 1, -1, 1 ), iPos = 0, model = "lpm", estLogitIntMfx$mfxest[ 2:4, 2 ] ) )
+ }
 effect   stdEr 
0.22466 0.06745 
> if( mfxLoaded ) {
+   print( urbinEffCat( estLogitIntMfx$mfxest[ , 1 ], xMeanInt[ -1 ], c(2:4),
+     c( 0, 1, -1, 1 ), iPos = 0, model = "lpm", estLogitIntMfx$mfxest[ , 2 ] ) )
+ }
 effect   stdEr 
0.22466 0.06745 
> 
> 
> proc.time()
   user  system elapsed 
  3.519   0.162   3.674 
