
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
Loading required package: miscTools
> library( "maxLik" )

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library( "mvProbit" )
Loading required package: mvtnorm
Loading required package: abind
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for husband is moonlightning
> Mroz87$husMoonlight <- Mroz87$hushrs > 2500
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### linear in age
> estMvProbitLin <- mvProbit( cbind( lfp, husMoonlight ) ~ kids + age + educ, 
+   data = Mroz87, nGHK = 300 )
> summary( estMvProbitLin )

Call:
mvProbit(formula = cbind(lfp, husMoonlight) ~ kids + age + educ, 
    data = Mroz87, nGHK = 300)

Coefficients:
       Estimate Std. error t value  Pr(> t)    
b_1_0 -0.073323   0.462115  -0.159  0.87393    
b_1_1 -0.315717   0.127760  -2.471  0.01347 *  
b_1_2 -0.019149   0.007084  -2.703  0.00687 ** 
b_1_3  0.104753   0.021673   4.833 1.34e-06 ***
b_2_0 -0.705498   0.492094  -1.434  0.15167    
b_2_1  0.097757   0.137390   0.712  0.47676    
b_2_2 -0.008893   0.007636  -1.165  0.24417    
b_2_3  0.032584   0.022245   1.465  0.14299    
R_1_2 -0.108365   0.062640  -1.730  0.08364 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

BHHH maximisation, 4 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -931.4136 on 9 Df

> # mean values of the explanatory variables
> xMeanLin <- c( 1, colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ) )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estMvProbitLin )[1:4], xMeanLin, xPos = 3, model = "probit" )
    semEla      stdEr 
-0.3197645         NA 
> # semi-elasticity of age based on numerical derivation
> Mroz87Lower <- as.data.frame( t( xMeanLin * c( 1, 1, 0.995, 1 ) ) )
> Mroz87Upper <- as.data.frame( t( xMeanLin * c( 1, 1, 1.005, 1 ) ) )
> Mroz87Lower$lfp <- Mroz87Upper$lfp <- 1
> Mroz87Lower$husMoonlight <- Mroz87Upper$husMoonlight <- 1
> 100 * ( mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + educ,
+   coef = coef( estMvProbitLin ), data = Mroz87Upper ) -
+     mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + educ,
+       coef = coef( estMvProbitLin ), data = Mroz87Lower ) )
         lfp husMoonlight
1 -0.3197636    -0.124882
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estMvProbitLin )[1:4], xMeanLin, 3, model = "probit", 
+   seSimplify = FALSE )$derivCoef
                   kids         age        educ 
 0.05740266  0.03994554 19.14068504  0.70529805 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla }, 
+   t0 = coef( estMvProbitLin )[1:4], 
+   allXVal = xMeanLin, xPos = 3, model = "probit" )
          b_1_0      b_1_1    b_1_2     b_1_3
[1,] 0.05740266 0.03994554 19.14069 0.7052981
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estMvProbitLin )[1:4], xMeanLin, 3, model = "probit", 
+   seSimplify = TRUE )$derivCoef
[1]  0.0000  0.0000 16.6989  0.0000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estMvProbitLin )[1:4], xMeanLin, 3, model = "probit", 
+   vcov( estMvProbitLin )[1:4,1:4] )
    semEla      stdEr 
-0.3197645  0.1183221 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estMvProbitLin )[1:4], xMeanLin, 3, model = "probit",
+   sqrt( diag( vcov( estMvProbitLin ) ) )[1:4], seSimplify = FALSE )
    semEla      stdEr 
-0.3197645  0.1390964 
Warning message:
In urbinEla(coef(estMvProbitLin)[1:4], xMeanLin, 3, model = "probit",  :
  the returned standard error is likely very imprecise; you can provide the full covariance matrix via argument 'allCoefVcov' or do NOT set argument 'seSimplify' to FALSE to obtain a more precise standard error
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estMvProbitLin )[1:4], xMeanLin, 3, model = "probit", 
+   sqrt( diag( vcov( estMvProbitLin ) ) )[1:4] )
    semEla      stdEr 
-0.3197645  0.1182920 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> estMvProbitLinME <- margEff( estMvProbitLin, 
+   data = as.data.frame( t( xMeanLin ) ), calcVCov = TRUE )
> estMvProbitLinME[[ "d_y1_d_age" ]] * xMeanLin[ "age" ]
       age 
-0.3197645 
> estMvProbitLinMEVcov <- attr( estMvProbitLinME, "vcov" )[ 1, , ]
> urbinEla( estMvProbitLinME[[ "d_y1_d_age" ]], xMeanLin["age"], 1, iPos = 0, 
+   model = "lpm", sqrt( estMvProbitLinMEVcov[ "d_y1_d_age", "d_y1_d_age" ] ) )
    semEla      stdEr 
-0.3197645  0.1182817 
> urbinEla( unlist( estMvProbitLinME[ c( 1, 3, 5 ) ] ), xMeanLin[-1], 2, iPos = 0, 
+   model = "lpm", estMvProbitLinMEVcov[ c( 1, 3, 5 ), c( 1, 3, 5 ) ] )
    semEla      stdEr 
-0.3197645  0.1182817 
> 
> 
> ### quadratic in age
> estMvProbitQuad <- mvProbit( 
+   cbind( lfp, husMoonlight ) ~ kids + age + I(age^2) + educ, 
+   data = Mroz87, nGHK = 300 )
> summary( estMvProbitQuad )

Call:
mvProbit(formula = cbind(lfp, husMoonlight) ~ kids + age + I(age^2) + 
    educ, data = Mroz87, nGHK = 300)

Coefficients:
        Estimate Std. error t value  Pr(> t)    
b_1_0 -4.3361102  1.4015968  -3.094  0.00198 ** 
b_1_1 -0.4385800  0.1341069  -3.270  0.00107 ** 
b_1_2  0.1924689  0.0655689   2.935  0.00333 ** 
b_1_3 -0.0024969  0.0007706  -3.240  0.00119 ** 
b_1_4  0.1071066  0.0220491   4.858 1.19e-06 ***
b_2_0  0.5479702  1.4731428   0.372  0.70991    
b_2_1  0.1340749  0.1444236   0.928  0.35323    
b_2_2 -0.0716198  0.0701790  -1.021  0.30748    
b_2_3  0.0007412  0.0008239   0.900  0.36837    
b_2_4  0.0325479  0.0222764   1.461  0.14399    
R_1_2 -0.1031045  0.0629766  -1.637  0.10159    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

BHHH maximisation, 4 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -925.8778 on 11 Df

> # mean values of the explanatory variables
> xMeanQuad <- c( xMeanLin[ 1:3], xMeanLin[3]^2, xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit" )
    semEla      stdEr 
-0.3192305         NA 
> # semi-elasticity of age based on numerical derivation
> 100 * ( mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + I(age^2) + educ,
+   coef = coef( estMvProbitQuad ), data = Mroz87Upper ) -
+     mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + I(age^2) + educ,
+       coef = coef( estMvProbitQuad ), data = Mroz87Lower ) )
        lfp husMoonlight
1 -0.319242   -0.1165847
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit",
+   seSimplify = FALSE )$derivCoef
                     kids          age          age         educ 
1.097640e-01 7.638294e-02 2.066519e+01 1.559491e+03 1.348655e+00 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla }, 
+   t0 = coef( estMvProbitQuad )[1:5], 
+   allXVal = xMeanQuad, xPos = c( 3, 4 ), model = "probit" )
        b_1_0      b_1_1    b_1_2    b_1_3    b_1_4
[1,] 0.109764 0.07638294 20.66519 1559.491 1.348655
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit", 
+   seSimplify = TRUE )$derivCoef
[1]    0.00000    0.00000   15.99607 1360.87660    0.00000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit", 
+   vcov( estMvProbitQuad )[1:5,1:5] )
    semEla      stdEr 
-0.3192305  0.1142198 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit", 
+   sqrt( diag( vcov( estMvProbitQuad ) ) )[1:5], seSimplify = FALSE )
    semEla      stdEr 
-0.3192305  1.8179301 
Warning messages:
1: In urbinEla(coef(estMvProbitQuad)[1:5], xMeanQuad, c(3, 4), model = "probit",  :
  the returned standard error is likely very imprecise; you can provide the full covariance matrix via argument 'allCoefVcov' or do NOT set argument 'seSimplify' to FALSE to obtain a more precise standard error
2: In urbinEla(allCoef = coef(estMvProbitQuad)[1:5], allXVal = xMeanQuad, xPos = c(3, 4), model = "probit", allCoefVcov = sqrt(diag(vcov(estMvProbitQuad)))[1:5], seSimplify = FALSE) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit", 
+   sqrt( diag( vcov( estMvProbitQuad ) ) )[1:5] )
    semEla      stdEr 
-0.3192305  1.4831857 
Warning message:
In urbinEla(allCoef = coef(estMvProbitQuad)[1:5], allXVal = xMeanQuad, xPos = c(3, 4), model = "probit", allCoefVcov = sqrt(diag(vcov(estMvProbitQuad)))[1:5]) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd)
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit", 
+   sqrt( diag( vcov( estMvProbitQuad ) ) )[1:5], 
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE )
    semEla      stdEr 
-0.3192305  0.1101270 
Warning message:
In urbinEla(coef(estMvProbitQuad)[1:5], xMeanQuad, c(3, 4), model = "probit",  :
  the returned standard error is likely very imprecise; you can provide the full covariance matrix via argument 'allCoefVcov' or do NOT set argument 'seSimplify' to FALSE to obtain a more precise standard error
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd, simplified)
> urbinEla( coef( estMvProbitQuad )[1:5], xMeanQuad, c( 3, 4 ), model = "probit", 
+   sqrt( diag( vcov( estMvProbitQuad ) ) )[1:5],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
    semEla      stdEr 
-0.3192305  0.1346453 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> estMvProbitQuadME <- margEff( estMvProbitQuad, 
+   data = as.data.frame( t( xMeanQuad ) ), calcVCov = TRUE )
> estMvProbitQuadME[[ "d_y1_d_age" ]] * xMeanQuad[ "age" ] +
+   2 * estMvProbitQuadME[[ "d_y1_d_I(age^2)" ]] * xMeanQuad[ "age" ]^2
       age 
-0.3192305 
> estMvProbitQuadMEVcov <- attr( estMvProbitQuadME, "vcov" )[ 1, , ]
> urbinEla( unlist( estMvProbitQuadME[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ] ), 
+   xMeanQuad["age"], 1:2, iPos = 0, model = "lpm", 
+   estMvProbitQuadMEVcov[ c( 3, 5 ), c( 3, 5 ) ] )
    semEla      stdEr 
-0.3192305  0.1142380 
> urbinEla( unlist( estMvProbitQuadME[ c( 1, 3, 5, 7 ) ] ), xMeanQuad[-1], 
+   2:3, iPos = 0, model = "lpm", 
+   estMvProbitQuadMEVcov[ c( 1, 3, 5, 7 ), c( 1, 3, 5, 7 ) ] )
    semEla      stdEr 
-0.3192305  0.1142380 
> urbinEla( unlist( estMvProbitQuadME[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ] ), 
+   xMeanQuad["age"], 1:2, iPos = 0, model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( 3, 5 ) ] )
    semEla      stdEr 
-0.3192305  1.4025971 
Warning message:
In urbinEla(allCoef = unlist(estMvProbitQuadME[c("d_y1_d_age", "d_y1_d_I(age^2)")]), allXVal = xMeanQuad["age"], xPos = 1:2, model = "lpm", allCoefVcov = sqrt(diag(estMvProbitQuadMEVcov))[c(3, 5)], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEla( unlist( estMvProbitQuadME[ c( 1, 3, 5, 7 ) ] ), xMeanQuad[-1], 
+   2:3, iPos = 0, model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( 1, 3, 5, 7 ) ] )
    semEla      stdEr 
-0.3192305  1.4025971 
Warning message:
In urbinEla(allCoef = unlist(estMvProbitQuadME[c(1, 3, 5, 7)]), allXVal = xMeanQuad[-1], xPos = 2:3, model = "lpm", allCoefVcov = sqrt(diag(estMvProbitQuadMEVcov))[c(1, 3, 5, 7)], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEla( unlist( estMvProbitQuadME[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ] ), 
+   xMeanQuad["age"], 1:2, iPos = 0, model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( 3, 5 ) ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
    semEla      stdEr 
-0.3192305  0.1274729 
> urbinEla( unlist( estMvProbitQuadME[ c( 1, 3, 5, 7 ) ] ), xMeanQuad[-1], 
+   2:3, iPos = 0, model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( 1, 3, 5, 7 ) ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
    semEla      stdEr 
-0.3192305  0.1274729 
> 
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal( 
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estMvProbitInt <- mvProbit( 
+   cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ, 
+   data = Mroz87, nGHK = 300 )
> summary( estMvProbitInt )

Call:
mvProbit(formula = cbind(lfp, husMoonlight) ~ kids + age30.37 + 
    age38.44 + age53.60 + educ, data = Mroz87, nGHK = 300)

Coefficients:
      Estimate Std. error t value  Pr(> t)    
b_1_0 -0.89293    0.27543  -3.242  0.00119 ** 
b_1_1 -0.37752    0.13060  -2.891  0.00384 ** 
b_1_2  0.13457    0.12985   1.036  0.30005    
b_1_3  0.12189    0.13810   0.883  0.37743    
b_1_4 -0.51444    0.16311  -3.154  0.00161 ** 
b_1_5  0.10817    0.02186   4.948 7.51e-07 ***
b_2_0 -1.31553    0.30304  -4.341 1.42e-05 ***
b_2_1  0.08829    0.13980   0.632  0.52766    
b_2_2  0.38534    0.13876   2.777  0.00549 ** 
b_2_3  0.27846    0.14914   1.867  0.06189 .  
b_2_4  0.29291    0.17522   1.672  0.09459 .  
b_2_5  0.03263    0.02271   1.437  0.15082    
R_1_2 -0.10176    0.06302  -1.615  0.10640    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

BHHH maximisation, 4 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -924.4426 on 13 Df

> # mean values of the explanatory variables
> xMeanInt <- c( xMeanLin[1:2], mean( Mroz87$age30.37 ), 
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[4] )
> # semi-elasticity of age without standard errors
> urbinElaInt( coef( estMvProbitInt )[1:6], xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "probit" )
    semEla      stdEr 
-0.3752467         NA 
> # semi-elasticities based on numerical derivation
> Mroz87Lower <- Mroz87
> Mroz87Lower$age <- Mroz87$age * 0.95
> Mroz87Lower$age30.37 <- Mroz87Lower$age <= 37.5
> Mroz87Lower$age38.44 <- Mroz87Lower$age > 37.5 & Mroz87Lower$age <= 44.5
> Mroz87Lower$age45.52 <- Mroz87Lower$age > 44.5 & Mroz87Lower$age <= 52.5
> Mroz87Lower$age53.60 <- Mroz87Lower$age > 52.5 
> all.equal( 
+   Mroz87Lower$age30.37 + Mroz87Lower$age38.44 + Mroz87Lower$age45.52 + 
+     Mroz87Lower$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> Mroz87Upper <- Mroz87
> Mroz87Upper$age <- Mroz87$age * 1.05
> Mroz87Upper$age30.37 <- Mroz87Upper$age <= 37.5
> Mroz87Upper$age38.44 <- Mroz87Upper$age > 37.5 & Mroz87Upper$age <= 44.5
> Mroz87Upper$age45.52 <- Mroz87Upper$age > 44.5 & Mroz87Upper$age <= 52.5
> Mroz87Upper$age53.60 <- Mroz87Upper$age > 52.5 
> all.equal( 
+   Mroz87Upper$age30.37 + Mroz87Upper$age38.44 + Mroz87Upper$age45.52 + 
+     Mroz87Upper$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> 10 * colMeans( 
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = Mroz87Upper ) -
+       mvProbitExp( 
+         cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+         coef = coef( estMvProbitInt ), data = Mroz87Lower ) )
         lfp husMoonlight 
 -0.35159082  -0.08086758 
> Mroz87LowerMean <- Mroz87Lower
> Mroz87UpperMean <- Mroz87Upper
> Mroz87LowerMean$kids <- Mroz87UpperMean$kids <- xMeanInt[ "kids" ]
> Mroz87LowerMean$educ <- Mroz87UpperMean$educ <- xMeanInt[ "educ" ]
> 10 * colMeans( 
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = Mroz87UpperMean ) -
+     mvProbitExp( 
+       cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+       coef = coef( estMvProbitInt ), data = Mroz87LowerMean ) )
         lfp husMoonlight 
 -0.36633139  -0.07482241 
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinElaInt( coef( estMvProbitInt )[1:6], xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), model = "probit" )$derivCoef
[1] -0.004286748 -0.002983076 -0.555236077 -0.049403265  0.545330425
[6] -0.052670643
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinElaInt( x, ... )$semEla }, 
+   t0 = coef( estMvProbitInt )[1:6], allXVal = xMeanInt, 
+   xPos = c( 3, 4, 0, 5 ), xBound = c( 30, 37.5, 44.5, 52.5, 60 ), 
+   model = "probit" )
            b_1_0        b_1_1      b_1_2       b_1_3     b_1_4       b_1_5
[1,] -0.004286748 -0.002983076 -0.5552361 -0.04940326 0.5453304 -0.05267064
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinElaInt( coef( estMvProbitInt )[1:6], xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), 
+   model = "probit", vcov( estMvProbitInt )[1:6,1:6] )
    semEla      stdEr 
-0.3752467  0.1020941 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinElaInt( coef( estMvProbitInt )[1:6], xMeanInt, 
+   c( 3, 4, 0, 5 ), c( 30, 37.5, 44.5, 52.5, 60 ), 
+   model = "probit", sqrt( diag( vcov( estMvProbitInt ) ) )[1:6] )
    semEla      stdEr 
-0.3752467  0.1147155 
> # semi-elasticity of age based on partial derivatives calculated by the mfx package
> names( xMeanInt )[3:5] <- c( "age30.37", "age38.44", "age53.60" )
> estMvProbitIntME <- margEff( estMvProbitInt, 
+   data = as.data.frame( t( xMeanInt ) ), calcVCov = TRUE,
+   dummyVars = names( xMeanInt )[3:5] )
> estMvProbitIntMEVcov <- attr( estMvProbitIntME, "vcov" )[ 1, , ]
> urbinElaInt( unlist( estMvProbitIntME[ c( 3, 5, 7 ) ] ), xMeanInt[ 3:5 ], 
+   c( 1, 2, 0, 3 ), iPos = 0, c( 30, 37.5, 44.5, 52.5, 60 ), model = "lpm", 
+   estMvProbitIntMEVcov[ c( 3, 5, 7 ), c( 3, 5, 7 ) ] )
    semEla      stdEr 
-0.3769064  0.1043961 
> urbinElaInt( unlist( estMvProbitIntME[ c( 1, 3, 5, 7, 9 ) ] ), xMeanInt[-1], 
+   c( 2, 3, 0, 4 ), iPos = 0, c( 30, 37.5, 44.5, 52.5, 60 ), model = "lpm", 
+   estMvProbitIntMEVcov[ c( 1, 3, 5, 7, 9 ), c( 1, 3, 5, 7, 9 ) ] )
    semEla      stdEr 
-0.3769064  0.1043961 
> urbinElaInt( unlist( estMvProbitIntME[ c( 3, 5, 7 ) ] ), xMeanInt[ 3:5 ], 
+   c( 1, 2, 0, 3 ), iPos = 0, c( 30, 37.5, 44.5, 52.5, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitIntMEVcov ) )[ c( 3, 5, 7 ) ] )
    semEla      stdEr 
-0.3769064  0.1172418 
> urbinElaInt( unlist( estMvProbitIntME[ c( 1, 3, 5, 7, 9 ) ] ), xMeanInt[-1], 
+   c( 2, 3, 0, 4 ), iPos = 0, c( 30, 37.5, 44.5, 52.5, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitIntMEVcov ) )[ c( 1, 3, 5, 7, 9 ) ] )
    semEla      stdEr 
-0.3769064  0.1172418 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1:2 ], NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estMvProbitLin )[1:4], xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "probit" )
    effect      stdEr 
-0.1505485         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> Mroz87Ref <- as.data.frame( t( xMeanLin ) )
> Mroz87Int <- as.data.frame( t( xMeanLin ) )
> Mroz87Ref$age <- 35
> Mroz87Int$age <- 55
> Mroz87Ref$lfp <- Mroz87Int$lfp <- 1
> Mroz87Ref$husMoonlight <- Mroz87Int$husMoonlight <- 1
> mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + educ,
+   coef = coef( estMvProbitLin ), data = Mroz87Int ) -
+     mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + educ,
+       coef = coef( estMvProbitLin ), data = Mroz87Ref )
         lfp husMoonlight
1 -0.1505485  -0.05787064
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEffInt( coef( estMvProbitLin )[1:4], xMeanLinInt, 3, 
+   c( 30, 40 ), c( 50, 60 ), model = "probit" )$derivCoef
[1] 0.01968545 0.01369877 8.65390460 0.24187219
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect }, 
+   t0 = coef( estMvProbitLin )[1:4], 
+   allXVal = xMeanLinInt, xPos = 3, 
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "probit" )
          b_1_0      b_1_1    b_1_2     b_1_3
[1,] 0.01968545 0.01369877 8.653905 0.2418722
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estMvProbitLin )[1:4], xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "probit", 
+   allCoefVcov = vcov( estMvProbitLin )[1:4,1:4] )
    effect      stdEr 
-0.1505485  0.0553784 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estMvProbitLin )[1:4], xMeanLinInt, 3,
+   c( 30, 40 ), c( 50, 60 ), model = "probit", 
+   allCoefVcov = sqrt( diag( vcov( estMvProbitLin ) ) )[1:4] )
     effect       stdEr 
-0.15054849  0.06221994 
> # semi-elasticity of age based on marginal effects
> urbinEffInt( estMvProbitLinME[ "d_y1_d_age" ], NULL, 1, iPos = 0, 
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   sqrt( estMvProbitLinMEVcov[ "d_y1_d_age", "d_y1_d_age" ] ) )
     effect       stdEr 
-0.15034352  0.05561244 
> urbinEffInt( estMvProbitLinME[ c( 1, 3, 5 ) ], NULL, 2, iPos = 0, 
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   estMvProbitLinMEVcov[ c( 1, 3, 5 ), c( 1, 3, 5 ) ] )
     effect       stdEr 
-0.15034352  0.05561244 
> urbinEffInt( estMvProbitLinME[ c( 1, 3, 5 ) ], NULL, 2, iPos = 0, 
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitLinMEVcov ) )[ c( 1, 3, 5 ) ] )
     effect       stdEr 
-0.15034352  0.05561244 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear and quadratic explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[ 1:2 ], NA, NA, xMeanLin[4] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( estMvProbitQuad )[1:5], xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "probit" )
    effect      stdEr 
-0.2529336         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + I(age^2) + educ,
+   coef = coef( estMvProbitQuad ), data = Mroz87Int ) -
+   mvProbitExp( cbind( lfp, husMoonlight ) ~ kids + age + I(age^2) + educ,
+     coef = coef( estMvProbitQuad ), data = Mroz87Ref )
         lfp husMoonlight
1 -0.2528346  -0.03262168
> # partial derivatives of the effect wrt the coefficients
> urbinEffInt( coef( estMvProbitQuad )[1:5], xMeanQuadInt, c( 3, 4 ), 
+   c( 30, 40 ), c( 50, 60 ), model = "probit" )$derivCoef
[1] 2.215236e-03 1.541545e-03 7.673875e+00 6.864029e+02 2.721828e-02
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect }, 
+   t0 = coef( estMvProbitQuad )[1:5], 
+   allXVal = xMeanQuadInt, xPos = c( 3, 4 ), 
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "probit" )
           b_1_0       b_1_1    b_1_2    b_1_3      b_1_4
[1,] 0.002215236 0.001541545 7.673875 686.4025 0.02721828
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( estMvProbitQuad )[1:5], xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "probit",
+   allCoefVcov = vcov( estMvProbitQuad )[1:5,1:5] )
     effect       stdEr 
-0.25293356  0.06271326 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( estMvProbitQuad )[1:5], xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "probit", 
+   allCoefVcov = sqrt( diag( vcov( estMvProbitQuad ) ) )[1:5] )
    effect      stdEr 
-0.2529336  0.7300480 
Warning message:
In urbinEffInt(allCoef = coef(estMvProbitQuad)[1:5], allXVal = xMeanQuadInt, xPos = c(3, 4), refBound = c(30, 40), intBound = c(50, 60), model = "probit", allCoefVcov = sqrt(diag(vcov(estMvProbitQuad)))[1:5]) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (standard errors + mean value and standard deviation of age)
> urbinEffInt( coef( estMvProbitQuad )[1:5], xMeanQuadInt, c( 3, 4 ),
+   c( 30, 40 ), c( 50, 60 ), model = "probit", 
+   allCoefVcov = sqrt( diag( vcov( estMvProbitQuad ) )[1:5] ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.25293356  0.07130024 
> # semi-elasticity of age based on marginal effects
> urbinEffInt( estMvProbitQuadME[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ], 
+   NULL, 1:2, iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   estMvProbitQuadMEVcov[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ), 
+     c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ] )
     effect       stdEr 
-0.24256526  0.06018093 
> urbinEffInt( estMvProbitQuadME[ c( 1, 3, 5, 7 ) ], NULL, 2:3, iPos = 0, 
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   estMvProbitQuadMEVcov[ c( 1, 3, 5, 7 ), c( 1, 3, 5, 7 ) ] )
     effect       stdEr 
-0.24256526  0.06018093 
> urbinEffInt( estMvProbitQuadME[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ], 
+   NULL, 1:2, iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ] )
    effect      stdEr 
-0.2425653  0.6786951 
Warning message:
In urbinEffInt(allCoef = estMvProbitQuadME[c("d_y1_d_age", "d_y1_d_I(age^2)")], allXVal = NULL, xPos = 1:2, refBound = c(30, 40), intBound = c(50, 60), model = "lpm", allCoefVcov = sqrt(diag(estMvProbitQuadMEVcov))[c("d_y1_d_age", "d_y1_d_I(age^2)")], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEffInt( estMvProbitQuadME[ c( 1, 3, 5, 7 ) ], NULL, 2:3, iPos = 0, 
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( 1, 3, 5, 7 ) ] )
    effect      stdEr 
-0.2425653  0.6786951 
Warning message:
In urbinEffInt(allCoef = estMvProbitQuadME[c(1, 3, 5, 7)], allXVal = NULL, xPos = 2:3, refBound = c(30, 40), intBound = c(50, 60), model = "lpm", allCoefVcov = sqrt(diag(estMvProbitQuadMEVcov))[c(1, 3, 5, 7)], iPos = 0) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEffInt( estMvProbitQuadME[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ], 
+   NULL, 1:2, iPos = 0, c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( "d_y1_d_age", "d_y1_d_I(age^2)" ) ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.24256526  0.06610483 
> urbinEffInt( estMvProbitQuadME[ c( 1, 3, 5, 7 ) ], NULL, 2:3, iPos = 0, 
+   c( 30, 40 ), c( 50, 60 ), model = "lpm", 
+   sqrt( diag( estMvProbitQuadMEVcov ) )[ c( 1, 3, 5, 7 ) ],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.24256526  0.06610483 
> 
> 
> ### grouping and re-basing categorical variables
> ### effects of age changing from the 30-44 category to the 53-60 category
> # without standard errors
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ), 
+   model = "probit" )
    effect      stdEr 
-0.2524207         NA 
> # effects calculated based on predicted values
> df30.37 <- df38.44 <- df45.52 <- df53.60 <- 
+   as.data.frame( t( c( xMeanInt, lfp = 1, husMoonlight = 1 ) ) )
> df30.37[ , 3:5 ] <- c( TRUE, FALSE, FALSE )
> df38.44[ , 3:5 ] <- c( FALSE, TRUE, FALSE )
> df45.52[ , 3:5 ] <- c( FALSE, FALSE, FALSE )
> df53.60[ , 3:5 ] <- c( FALSE, FALSE, TRUE )
> mvProbitExp( 
+   cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+   coef = coef( estMvProbitInt ), data = df53.60 ) -
+   sum( Mroz87$age30.37 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = df30.37 ) -
+   sum( Mroz87$age38.44 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = df38.44 )
         lfp husMoonlight
1 -0.2524184  -0.01696316
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ), 
+   model = "probit" )$derivCoef
[1] -0.004647101 -0.003233839 -0.223996871 -0.157065535  0.376415306
[6] -0.057098243
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect }, 
+   t0 = coef( estMvProbitInt )[1:6], 
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( -1, -1, 1, 0 ), 
+   model = "probit" )
            b_1_0        b_1_1      b_1_2      b_1_3     b_1_4       b_1_5
[1,] -0.004647101 -0.003233839 -0.2239969 -0.1570655 0.3764153 -0.05709824
> # with full covariance matrix
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ), 
+   model = "probit", allCoefVcov = vcov( estMvProbitInt )[1:6,1:6] )
     effect       stdEr 
-0.25242066  0.06584006 
> # with standard errors only
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( -1, -1, 1, 0 ), 
+   model = "probit", allCoefVcov = sqrt( diag( vcov( estMvProbitInt ) ) )[1:6] )
     effect       stdEr 
-0.25242066  0.07134147 
> # semi-elasticity of age based on marginal effects
> urbinEffCat( unlist( estMvProbitIntME[ c( 3, 5, 7 ) ] ), 
+   xMeanInt[ 3:5 ], c(1:3), iPos = 0, c( -1, -1, 1, 0 ), model = "lpm", 
+   estMvProbitIntMEVcov[ c( 3, 5, 7 ), c( 3, 5, 7 ) ] )
     effect       stdEr 
-0.25345349  0.06730055 
> urbinEffCat( unlist( estMvProbitIntME[ c( 1, 3, 5, 7, 9 ) ] ), 
+   xMeanInt[ -1 ], c(2:4), iPos = 0, c( -1, -1, 1, 0 ), model = "lpm", 
+   estMvProbitIntMEVcov[ c( 1, 3, 5, 7, 9 ), c( 1, 3, 5, 7, 9 ) ] )
     effect       stdEr 
-0.25345349  0.06730055 
> urbinEffCat( unlist( estMvProbitIntME[ c( 3, 5, 7 ) ] ), 
+   xMeanInt[ 3:5 ], c(1:3), iPos = 0, c( -1, -1, 1, 0 ), model = "lpm", 
+   sqrt( diag( estMvProbitIntMEVcov ) )[ c( 3, 5, 7 ) ] )
     effect       stdEr 
-0.25345349  0.07286983 
> urbinEffCat( unlist( estMvProbitIntME[ c( 1, 3, 5, 7, 9 ) ] ), 
+   xMeanInt[ -1 ], c(2:4), iPos = 0, c( -1, -1, 1, 0 ), model = "lpm", 
+   sqrt( diag( estMvProbitIntMEVcov ) )[ c( 1, 3, 5, 7, 9 ) ] )
     effect       stdEr 
-0.25345349  0.07286983 
> 
> ### effects of age changing from the 53-60 category to the 38-52 category
> # without standard errors
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ), 
+   model = "probit" )
   effect     stdEr 
0.2230076        NA 
> # effects calculated based on predicted values
> sum( Mroz87$age38.44 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = df38.44 ) +
+   sum( Mroz87$age45.52 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = df45.52 ) -
+   mvProbitExp( 
+     cbind( lfp, husMoonlight ) ~ kids + age30.37 + age38.44 + age53.60 + educ,
+     coef = coef( estMvProbitInt ), data = df53.60 )
        lfp husMoonlight
1 0.2228434  -0.05351638
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ), 
+   model = "probit" )$derivCoef
[1]  0.012427368  0.008647996  0.000000000  0.168978545 -0.376415306
[6]  0.152693242
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect }, 
+   t0 = coef( estMvProbitInt )[1:6], 
+   allXVal = xMeanInt, xPos = c( 3:5 ), xGroups = c( 0, 1, -1, 1 ), 
+   model = "probit" )
          b_1_0       b_1_1 b_1_2     b_1_3      b_1_4     b_1_5
[1,] 0.01242737 0.008647996     0 0.1689785 -0.3764153 0.1526932
> # with full covariance matrix
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ), 
+   model = "probit", allCoefVcov = vcov( estMvProbitInt )[1:6,1:6] )
    effect      stdEr 
0.22300755 0.06066496 
> # with standard errors only
> urbinEffCat( coef( estMvProbitInt )[1:6], xMeanInt, c( 3:5 ), c( 0, 1, -1, 1 ), 
+   model = "probit", allCoefVcov = sqrt( diag( vcov( estMvProbitInt ) ) )[1:6] )
    effect      stdEr 
0.22300755 0.06586689 
> # semi-elasticity of age based on partial derivative calculated by the mfx package
> urbinEffCat( unlist( estMvProbitIntME[ c( 3, 5, 7 ) ] ), 
+   xMeanInt[ 3:5 ], c(1:3), iPos = 0, c( 0, 1, -1, 1 ), model = "lpm", 
+   estMvProbitIntMEVcov[ c( 3, 5, 7 ), c( 3, 5, 7 ) ] )
    effect      stdEr 
0.22362606 0.06175168 
> urbinEffCat( unlist( estMvProbitIntME[ c( 1, 3, 5, 7, 9 ) ] ), 
+   xMeanInt[ -1 ], c(2:4), iPos = 0, c( 0, 1, -1, 1 ), model = "lpm", 
+   estMvProbitIntMEVcov[ c( 1, 3, 5, 7, 9 ), c( 1, 3, 5, 7, 9 ) ] )
    effect      stdEr 
0.22362606 0.06175168 
> urbinEffCat( unlist( estMvProbitIntME[ c( 3, 5, 7 ) ] ), 
+   xMeanInt[ 3:5 ], c(1:3), iPos = 0, c( 0, 1, -1, 1 ), model = "lpm", 
+   sqrt( diag( estMvProbitIntMEVcov ) )[ c( 3, 5, 7 ) ] )
    effect      stdEr 
0.22362606 0.06697739 
> urbinEffCat( unlist( estMvProbitIntME[ c( 1, 3, 5, 7, 9 ) ] ), 
+   xMeanInt[ -1 ], c(2:4), iPos = 0, c( 0, 1, -1, 1 ), model = "lpm", 
+   sqrt( diag( estMvProbitIntMEVcov ) )[ c( 1, 3, 5, 7, 9 ) ] )
    effect      stdEr 
0.22362606 0.06697739 
> 
> proc.time()
   user  system elapsed 
 15.021   2.353  17.445 
