
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "urbin" )
Loading required package: miscTools
> library( "maxLik" )

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library( "MASS" )
> 
> # load data set
> data( "Mroz87", package = "sampleSelection" )
> 
> # create dummy variable for kids
> Mroz87$kids <- as.numeric( Mroz87$kids5 > 0 | Mroz87$kids618 > 0 )
> 
> ### create categorical variable
> Mroz87$lfp3 <- factor( ifelse( Mroz87$hours == 0, "no",
+   ifelse( Mroz87$hours <= 1300, "part", "full" ) ),
+   levels = c( "no", "part", "full" ), ordered = TRUE )
> table( Mroz87$lfp3 )

  no part full 
 325  204  224 
> all.equal( Mroz87$lfp3 == "no", Mroz87$lfp == 0 )
[1] TRUE
> 
> ### linear in age
> estOProbitLin <- polr( lfp3 ~ kids + age + educ, data = Mroz87,
+   method = "probit", Hess = TRUE )
> summary( estOProbitLin )
Call:
polr(formula = lfp3 ~ kids + age + educ, data = Mroz87, Hess = TRUE, 
    method = "probit")

Coefficients:
        Value Std. Error t value
kids -0.37694   0.109469  -3.443
age  -0.01854   0.006273  -2.955
educ  0.07764   0.018644   4.164

Intercepts:
          Value   Std. Error t value
no|part   -0.2720  0.4048    -0.6719
part|full  0.4516  0.4050     1.1152

Residual Deviance: 1589.68 
AIC: 1599.68 
> # mean values of the explanatory variables and specification of the threshold
> xMeanLin <- c( colMeans( Mroz87[ , c( "kids", "age", "educ" ) ] ), -1, 0 )
> # semi-elasticity of age without standard errors
> urbinEla( coef( summary( estOProbitLin ) )[,1], xMeanLin, xPos = 2, 
+   iPos = 4, model = "oprobit" )
    semEla      stdEr 
-0.3097687         NA 
> urbinEla( coef( summary( estOProbitLin ) )[-5,1], xMeanLin[-5], xPos = 2, 
+   iPos = 4, model = "oprobit" )
    semEla      stdEr 
-0.3097687         NA 
> # semi-elasticity of age based on numerical derivation
> Mroz87Lower <- as.data.frame( t( xMeanLin * c( 1, 0.995, 1, 1, 1 ) ) )
> Mroz87Upper <- as.data.frame( t( xMeanLin * c( 1, 1.005, 1, 1, 1 ) ) )
> elaLinNum <- 100 * ( 
+   predict( estOProbitLin, newdata = Mroz87Upper, type = "probs" ) -
+     predict( estOProbitLin, newdata = Mroz87Lower, type = "probs" ) )
> print( elaLinNum )
         no        part        full 
 0.30976793 -0.03912874 -0.27063919 
> print( sum( elaLinNum[ c( "part", "full" ) ] ) )
[1] -0.3097679
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( summary( estOProbitLin ) )[,1], xMeanLin, xPos = 2, 
+   iPos = 4, seSimplify = FALSE, model = "oprobit" )$derivCoef
       kids         age        educ                         
 0.03776701 19.02029626  0.66683279 -0.05427206  0.00000000 
> urbinEla( coef( summary( estOProbitLin ) )[-5,1], xMeanLin[-5], xPos = 2, 
+   iPos = 4, seSimplify = FALSE, model = "oprobit" )$derivCoef
       kids         age        educ             
 0.03776701 19.02029626  0.66683279 -0.05427206 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla }, 
+   t0 = coef( summary( estOProbitLin ) )[,1], 
+   allXVal = xMeanLin, xPos = 2, iPos = 4, model = "oprobit" )
           kids     age      educ     no|part part|full
[1,] 0.03776701 19.0203 0.6668328 -0.05427206         0
> numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla }, 
+   t0 = coef( summary( estOProbitLin ) )[-5,1], 
+   allXVal = xMeanLin[-5], xPos = 2, iPos = 4, model = "oprobit" )
           kids     age      educ     no|part
[1,] 0.03776701 19.0203 0.6668328 -0.05427206
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( summary( estOProbitLin ) )[,1], xMeanLin, xPos = 2, 
+   iPos = 4, model = "oprobit", seSimplify = TRUE )$derivCoef
[1]  0.00000 16.71168  0.00000  0.00000  0.00000
> urbinEla( coef( summary( estOProbitLin ) )[-5,1], xMeanLin[-5], xPos = 2, 
+   iPos = 4, model = "oprobit", seSimplify = TRUE )$derivCoef
[1]  0.00000 16.71168  0.00000  0.00000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( summary( estOProbitLin ) )[,1], xMeanLin, xPos = 2, 
+   iPos = 4, model = "oprobit", vcov( estOProbitLin ) )
    semEla      stdEr 
-0.3097687  0.1048532 
> urbinEla( coef( summary( estOProbitLin ) )[-5,1], xMeanLin[-5], xPos = 2, 
+   iPos = 4, model = "oprobit", vcov( estOProbitLin )[-5,-5] )
    semEla      stdEr 
-0.3097687  0.1048532 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( summary( estOProbitLin ) )[,1], xMeanLin, 
+   xPos = 2, iPos = 4, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitLin ) ) ), seSimplify = FALSE )
    semEla      stdEr 
-0.3097687  0.1220274 
Warning message:
In urbinEla(coef(summary(estOProbitLin))[, 1], xMeanLin, xPos = 2,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> urbinEla( coef( summary( estOProbitLin ) )[-5,1], xMeanLin[-5], 
+   xPos = 2, iPos = 4, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitLin ) ) )[-5], seSimplify = FALSE )
    semEla      stdEr 
-0.3097687  0.1220274 
Warning message:
In urbinEla(coef(summary(estOProbitLin))[-5, 1], xMeanLin[-5], xPos = 2,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( summary( estOProbitLin ) )[,1], xMeanLin, 
+   xPos = 2, iPos = 4, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitLin ) ) ) )
    semEla      stdEr 
-0.3097687  0.1048338 
> urbinEla( coef( summary( estOProbitLin ) )[-5,1], xMeanLin[-5], 
+   xPos = 2, iPos = 4, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitLin ) ) )[-5] )
    semEla      stdEr 
-0.3097687  0.1048338 
> 
> 
> ### quadratic in age
> estOProbitQuad <- polr( lfp3 ~ kids + age + I(age^2) + educ, 
+   data = Mroz87, method = "probit", Hess = TRUE )
> summary( estOProbitQuad )
Call:
polr(formula = lfp3 ~ kids + age + I(age^2) + educ, data = Mroz87, 
    Hess = TRUE, method = "probit")

Coefficients:
             Value Std. Error t value
kids     -0.482611  0.1157934  -4.168
age       0.173433  0.0167408  10.360
I(age^2) -0.002267  0.0002722  -8.327
educ      0.078632  0.0190189   4.134

Intercepts:
          Value    Std. Error t value 
no|part     3.5821   0.0047   768.8317
part|full   4.3126   0.0452    95.3170

Residual Deviance: 1578.934 
AIC: 1590.934 
> # mean values of the explanatory variables and specification of the threshold
> xMeanQuad <- c( xMeanLin[ 1:2 ], xMeanLin[2]^2, xMeanLin[3:5] )
> # semi-elasticity of age without standard errors
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit" )
   semEla     stdEr 
-0.312823        NA 
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit" )
   semEla     stdEr 
-0.312823        NA 
> # semi-elasticity of age based on numerical derivation
> Mroz87Lower <- as.data.frame( 
+   t( xMeanQuad * c( 1, 0.995, 0.995^2, 1, 1, 1 ) ) )
> Mroz87Upper <- as.data.frame( 
+   t( xMeanQuad * c( 1, 1.005, 1.005^2, 1, 1, 1 ) ) )
> elaQuadNum <- 100 * ( 
+   predict( estOProbitQuad, newdata = Mroz87Upper, type = "probs" ) -
+     predict( estOProbitQuad, newdata = Mroz87Lower, type = "probs" ) )
> print( elaQuadNum )
          no         part         full 
 0.312832545 -0.009358894 -0.303473651 
> print( sum( elaQuadNum[ c( "part", "full" ) ] ) )
[1] -0.3128325
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", seSimplify = FALSE )$derivCoef
         kids           age           age          educ               
   0.07047985   20.41189743 1553.29134185    1.24442660   -0.10128115 
              
   0.00000000 
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", seSimplify = FALSE )$derivCoef
         kids           age           age          educ               
   0.07047985   20.41189743 1553.29134185    1.24442660   -0.10128115 
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla }, 
+   t0 = coef( summary( estOProbitQuad ) )[,1], 
+   allXVal = xMeanQuad, xPos = c( 2, 3 ), iPos = 5, model = "oprobit" )
           kids     age I(age^2)     educ    no|part part|full
[1,] 0.07047985 20.4119 1553.291 1.244427 -0.1012812         0
> numericGradient( function( x, ... ){ urbinEla( x, ... )$semEla }, 
+   t0 = coef( summary( estOProbitQuad ) )[-6,1], 
+   allXVal = xMeanQuad[-6], xPos = c( 2, 3 ), iPos = 5, model = "oprobit" )
           kids     age I(age^2)     educ    no|part
[1,] 0.07047985 20.4119 1553.291 1.244427 -0.1012812
> # simplified partial derivatives of the semi-elasticity wrt the coefficients
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", seSimplify = TRUE )$derivCoef
[1]    0.00000   16.10362 1370.02628    0.00000    0.00000    0.00000
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", seSimplify = TRUE )$derivCoef
[1]    0.00000   16.10362 1370.02628    0.00000    0.00000
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   vcov( estOProbitQuad ) )
    semEla      stdEr 
-0.3128230  0.1249982 
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   vcov( estOProbitQuad )[-6,-6] )
    semEla      stdEr 
-0.3128230  0.1249982 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) ), seSimplify = FALSE )
   semEla     stdEr 
-0.312823  0.544235 
Warning messages:
1: In urbinEla(coef(summary(estOProbitQuad))[, 1], xMeanQuad, xPos = c(2,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
2: In urbinEla(allCoef = coef(summary(estOProbitQuad))[, 1], allXVal = xMeanQuad, xPos = c(2, 3), model = "oprobit", allCoefVcov = sqrt(diag(vcov(estOProbitQuad))), seSimplify = FALSE, iPos = 5) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) )[-6], seSimplify = FALSE )
   semEla     stdEr 
-0.312823  0.544235 
Warning messages:
1: In urbinEla(coef(summary(estOProbitQuad))[-6, 1], xMeanQuad[-6],  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
2: In urbinEla(allCoef = coef(summary(estOProbitQuad))[-6, 1], allXVal = xMeanQuad[-6], xPos = c(2, 3), model = "oprobit", allCoefVcov = sqrt(diag(vcov(estOProbitQuad)))[-6], seSimplify = FALSE, iPos = 5) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, simplified)
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ),iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) ) )
    semEla      stdEr 
-0.3128230  0.4601884 
Warning message:
In urbinEla(allCoef = coef(summary(estOProbitQuad))[, 1], allXVal = xMeanQuad, xPos = c(2, 3), model = "oprobit", allCoefVcov = sqrt(diag(vcov(estOProbitQuad))), iPos = 5) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ),iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) )[-6] )
    semEla      stdEr 
-0.3128230  0.4601884 
Warning message:
In urbinEla(allCoef = coef(summary(estOProbitQuad))[-6, 1], allXVal = xMeanQuad[-6], xPos = c(2, 3), model = "oprobit", allCoefVcov = sqrt(diag(vcov(estOProbitQuad)))[-6], iPos = 5) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd)
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE )
    semEla      stdEr 
-0.3128230  0.1204706 
Warning message:
In urbinEla(coef(summary(estOProbitQuad))[, 1], xMeanQuad, xPos = c(2,  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) )[-6],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ),
+   seSimplify = FALSE )
    semEla      stdEr 
-0.3128230  0.1204706 
Warning message:
In urbinEla(coef(summary(estOProbitQuad))[-6, 1], xMeanQuad[-6],  :
  the returned standard error is likely upward biased; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or do NOT set argument 'seSimplify' to FALSE
> # semi-elasticity of age with standard errors (only standard errors, xMeanSd, simplified)
> urbinEla( coef( summary( estOProbitQuad ) )[,1], xMeanQuad, 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
    semEla      stdEr 
-0.3128230  0.1110966 
> urbinEla( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuad[-6], 
+   xPos = c( 2, 3 ), iPos = 5, model = "oprobit", 
+   sqrt( diag( vcov( estOProbitQuad ) ) )[-6],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
    semEla      stdEr 
-0.3128230  0.1110966 
> 
> 
> ### age is interval-coded (age is in the range 30-60)
> # create dummy variables for age intervals
> Mroz87$age30.37 <- Mroz87$age >= 30 & Mroz87$age <= 37
> Mroz87$age38.44 <- Mroz87$age >= 38 & Mroz87$age <= 44
> Mroz87$age45.52 <- Mroz87$age >= 45 & Mroz87$age <= 52
> Mroz87$age53.60 <- Mroz87$age >= 53 & Mroz87$age <= 60
> all.equal( 
+   Mroz87$age30.37 + Mroz87$age38.44 + Mroz87$age45.52 + Mroz87$age53.60,
+   rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> # estimation
> estOProbitInt <- polr( lfp3 ~ kids + age30.37 + age38.44 + age53.60 + educ, 
+   data = Mroz87, method = "probit", Hess = TRUE )
> summary( estOProbitInt )
Call:
polr(formula = lfp3 ~ kids + age30.37 + age38.44 + age53.60 + 
    educ, data = Mroz87, Hess = TRUE, method = "probit")

Coefficients:
                Value Std. Error t value
kids         -0.42914    0.11242  -3.817
age30.37TRUE  0.16327    0.11391   1.433
age38.44TRUE  0.15349    0.12197   1.258
age53.60TRUE -0.43982    0.14845  -2.963
educ          0.07976    0.01865   4.276

Intercepts:
          Value   Std. Error t value
no|part    0.5395  0.2449     2.2031
part|full  1.2668  0.2470     5.1286

Residual Deviance: 1583.811 
AIC: 1597.811 
> # mean values of the explanatory variables and specification of the threshold
> xMeanInt <- c( xMeanLin[1], mean( Mroz87$age30.37 ), 
+   mean( Mroz87$age38.44 ), mean( Mroz87$age53.60 ), xMeanLin[3:5] )
> # semi-elasticity of age without standard errors
> urbinElaInt( coef( summary( estOProbitInt ) )[,1], xMeanInt,
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit" )
    semEla      stdEr 
-0.3517519         NA 
> urbinElaInt( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7],
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit" )
    semEla      stdEr 
-0.3517519         NA 
> # semi-elasticities based on numerical derivation
> Mroz87Lower <- Mroz87
> Mroz87Lower$age <- Mroz87$age * 0.95
> Mroz87Lower$age30.37 <- Mroz87Lower$age <= 37.5
> Mroz87Lower$age38.44 <- Mroz87Lower$age > 37.5 & Mroz87Lower$age <= 44.5
> Mroz87Lower$age45.52 <- Mroz87Lower$age > 44.5 & Mroz87Lower$age <= 52.5
> Mroz87Lower$age53.60 <- Mroz87Lower$age > 52.5 
> all.equal( 
+   Mroz87Lower$age30.37 + Mroz87Lower$age38.44 + Mroz87Lower$age45.52 + 
+     Mroz87Lower$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> Mroz87Upper <- Mroz87
> Mroz87Upper$age <- Mroz87$age * 1.05
> Mroz87Upper$age30.37 <- Mroz87Upper$age <= 37.5
> Mroz87Upper$age38.44 <- Mroz87Upper$age > 37.5 & Mroz87Upper$age <= 44.5
> Mroz87Upper$age45.52 <- Mroz87Upper$age > 44.5 & Mroz87Upper$age <= 52.5
> Mroz87Upper$age53.60 <- Mroz87Upper$age > 52.5 
> all.equal( 
+   Mroz87Upper$age30.37 + Mroz87Upper$age38.44 + Mroz87Upper$age45.52 + 
+     Mroz87Upper$age53.60, rep( 1, nrow( Mroz87 ) ) )
[1] TRUE
> elaIntNum <- 10 * ( colMeans( 
+   predict( estOProbitInt, newdata = Mroz87Upper, type = "probs" ) ) -
+     colMeans(
+       predict( estOProbitInt, newdata = Mroz87Lower, type = "probs" ) ) )
> print( elaIntNum )
         no        part        full 
 0.33506537 -0.05298153 -0.28208385 
> print( sum( elaIntNum[ c( "part", "full" ) ] ) )
[1] -0.3350654
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinElaInt( coef( summary( estOProbitInt ) )[,1], xMeanInt,
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit" )$derivCoef
[1] -0.001369020 -0.886735879  0.279945927  0.726109373 -0.024172078
[6]  0.001967312  0.000000000
> urbinElaInt( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7],
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit" )$derivCoef
[1] -0.001369020 -0.886735879  0.279945927  0.726109373 -0.024172078
[6]  0.001967312
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinElaInt( x, ... )$semEla }, 
+   t0 = coef( summary( estOProbitInt ) )[,1], 
+   allXVal = xMeanInt, xPos = c( 2, 3, 0, 4 ), iPos = 6, 
+   xBound = c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit" )
            kids age30.37TRUE age38.44TRUE age53.60TRUE       educ      no|part
[1,] 0.002103346   -0.5557389  -0.04940405    0.5528681 0.03713771 -0.003022557
     part|full
[1,]         0
> numericGradient( function( x, ... ){ urbinElaInt( x, ... )$semEla }, 
+   t0 = coef( summary( estOProbitInt ) )[-7,1], 
+   allXVal = xMeanInt[-7], xPos = c( 2, 3, 0, 4 ), iPos = 6, 
+   xBound = c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit" )
            kids age30.37TRUE age38.44TRUE age53.60TRUE       educ      no|part
[1,] 0.002103346   -0.5557389  -0.04940405    0.5528681 0.03713771 -0.003022557
> # semi-elasticity of age with standard errors (full covariance matrix)
> urbinElaInt( coef( summary( estOProbitInt ) )[,1], xMeanInt,
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit",
+   allCoefVcov = vcov( estOProbitInt ) )
    semEla      stdEr 
-0.3517519  0.1257145 
> urbinElaInt( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7],
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit",
+   allCoefVcov = vcov( estOProbitInt )[-7,-7] )
    semEla      stdEr 
-0.3517519  0.1257145 
> # semi-elasticity of age with standard errors (only standard errors)
> urbinElaInt( coef( summary( estOProbitInt ) )[,1], xMeanInt,
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit",
+   allCoefVcov = sqrt( diag( vcov( estOProbitInt ) ) ) )
    semEla      stdEr 
-0.3517519  0.1516210 
> urbinElaInt( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7],
+   c( 2, 3, 0, 4 ), iPos = 6, c( 30, 37.5, 44.5, 52.5, 60 ), model = "oprobit",
+   allCoefVcov = sqrt( diag( vcov( estOProbitInt ) ) )[-7] )
    semEla      stdEr 
-0.3517519  0.1516210 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanLinInt <- c( xMeanLin[ 1 ], NA, xMeanLin[3:5] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( summary( estOProbitLin ) )[,1], allXVal = xMeanLinInt, 
+   xPos = 2, iPos = 4, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit" )
    effect      stdEr 
-0.1458386         NA 
> urbinEffInt( coef( summary( estOProbitLin ) )[-5,1], allXVal = xMeanLinInt[-5], 
+   xPos = 2, iPos = 4, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit" )
    effect      stdEr 
-0.1458386         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> Mroz87Ref <- as.data.frame( t( replace( xMeanLin, 2, 35 ) ) )
> Mroz87Int <- as.data.frame( t( replace( xMeanLin, 2, 55 ) ) )
> effIntNum <- predict( estOProbitLin, newdata = Mroz87Int, type = "probs" ) -
+   predict( estOProbitLin, newdata = Mroz87Ref, type = "probs" )
> print( effIntNum )
         no        part        full 
 0.14583865 -0.02232482 -0.12351383 
> print( sum( effIntNum[ c( "part", "full" ) ] ) )
[1] -0.1458386
> # partial derivatives of the semi-elasticity wrt the coefficients
> urbinEffInt( coef( summary( estOProbitLin ) )[,1], xMeanLinInt, 
+   xPos = 2, iPos = 4, c( 30, 40 ), c( 50, 60 ), model = "oprobit" )$derivCoef
[1]  0.01299905  8.62023229  0.22951751 -0.01867993  0.00000000
> urbinEffInt( coef( summary( estOProbitLin ) )[-5,1], xMeanLinInt[-5], 
+   xPos = 2, iPos = 4, c( 30, 40 ), c( 50, 60 ), model = "oprobit" )$derivCoef
[1]  0.01299905  8.62023229  0.22951751 -0.01867993
> # numerically computed partial derivatives of the semi-elasticity wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitLin ) )[,1],
+   allXVal = xMeanLinInt, xPos = 2, iPos = 4,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "oprobit" )
           kids      age      educ     no|part part|full
[1,] 0.01299905 8.620232 0.2295175 -0.01867993         0
> numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitLin ) )[-5,1],
+   allXVal = xMeanLinInt[-5], xPos = 2, iPos = 4,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "oprobit" )
           kids      age      educ     no|part
[1,] 0.01299905 8.620232 0.2295175 -0.01867993
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( summary( estOProbitLin ) )[,1], xMeanLinInt, 
+   xPos = 2, iPos = 4, c( 30, 40 ), c( 50, 60 ), model = "oprobit", 
+   allCoefVcov = vcov( estOProbitLin ) )
     effect       stdEr 
-0.14583865  0.04909474 
> urbinEffInt( coef( summary( estOProbitLin ) )[-5,1], xMeanLinInt[-5], 
+   xPos = 2, iPos = 4, c( 30, 40 ), c( 50, 60 ), model = "oprobit", 
+   allCoefVcov = vcov( estOProbitLin )[-5,-5] )
     effect       stdEr 
-0.14583865  0.04909474 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( summary( estOProbitLin ) )[,1], allXVal = xMeanLinInt, 
+   xPos = 2, iPos = 4, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit", allCoefVcov = sqrt( diag( vcov( estOProbitLin ) ) ) )
     effect       stdEr 
-0.14583865  0.05478757 
> urbinEffInt( coef( summary( estOProbitLin ) )[-5,1], allXVal = xMeanLinInt[-5], 
+   xPos = 2, iPos = 4, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit", allCoefVcov = sqrt( diag( vcov( estOProbitLin ) ) )[-5] )
     effect       stdEr 
-0.14583865  0.05478757 
> 
> 
> ### effect of age changing between discrete intervals 
> ### if age is used as linear and quadratic explanatory variable 
> # mean values of the 'other' explanatory variables
> xMeanQuadInt <- c( xMeanLin[1], NA, NA, xMeanLin[3:5] )
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # without standard errors
> urbinEffInt( coef( summary( estOProbitQuad ) )[,1], allXVal = xMeanQuadInt, 
+   xPos = c( 2, 3 ), iPos = 5, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit" )
    effect      stdEr 
-0.2402762         NA 
> urbinEffInt( coef( summary( estOProbitQuad ) )[-6,1], allXVal = xMeanQuadInt[-6], 
+   xPos = c( 2, 3 ), iPos = 5, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit" )
    effect      stdEr 
-0.2402762         NA 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # based on predicted values
> Mroz87Ref <- as.data.frame( t( replace( xMeanQuad, 2:3, c( 35, 35^2 ) ) ) )
> Mroz87Int <- as.data.frame( t( replace( xMeanQuad, 2:3, c( 55, 55^2 ) ) ) )
> effIntQuadNum <- predict( estOProbitQuad, newdata = Mroz87Int, type = "probs" ) -
+   predict( estOProbitQuad, newdata = Mroz87Ref, type = "probs" )
> print( effIntQuadNum )
         no        part        full 
 0.24016158 -0.05000446 -0.19015712 
> print( sum( effIntQuadNum[ c( "part", "full" ) ] ) )
[1] -0.2401616
> # partial derivatives of the effect wrt the coefficients
> urbinEffInt( coef( summary( estOProbitQuad ) )[,1], xMeanQuadInt, 
+   xPos = c( 2, 3 ), iPos = 5, c( 30, 40 ), c( 50, 60 ), model = "oprobit" )$derivCoef
[1]   0.002692085   7.787302113 693.442395620   0.047532776  -0.003868588
[6]   0.000000000
> urbinEffInt( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuadInt[-6], 
+   xPos = c( 2, 3 ), iPos = 5, c( 30, 40 ), c( 50, 60 ), model = "oprobit" )$derivCoef
[1]   0.002692085   7.787302113 693.442395620   0.047532776  -0.003868588
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitQuad ) )[,1],
+   allXVal = xMeanQuadInt, xPos = c( 2, 3 ), iPos = 5,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "oprobit" )
            kids      age I(age^2)       educ      no|part part|full
[1,] 0.002692085 7.787302  693.442 0.04753278 -0.003868588         0
> numericGradient( function( x, ... ){ urbinEffInt( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitQuad ) )[-6,1],
+   allXVal = xMeanQuadInt[-6], xPos = c( 2, 3 ), iPos = 5,
+   refBound = c( 30, 40 ), intBound = c( 50, 60 ), model = "oprobit" )
            kids      age I(age^2)       educ      no|part
[1,] 0.002692085 7.787302  693.442 0.04753278 -0.003868588
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (full covariance matrix) 
> urbinEffInt( coef( summary( estOProbitQuad ) )[,1], xMeanQuadInt, 
+   xPos = c( 2, 3 ), iPos = 5, c( 30, 40 ), c( 50, 60 ), model = "oprobit", 
+   allCoefVcov = vcov( estOProbitQuad ) )
     effect       stdEr 
-0.24027619  0.06853525 
> urbinEffInt( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuadInt[-6], 
+   xPos = c( 2, 3 ), iPos = 5, c( 30, 40 ), c( 50, 60 ), model = "oprobit", 
+   allCoefVcov = vcov( estOProbitQuad )[-6,-6] )
     effect       stdEr 
-0.24027619  0.06853525 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (only standard errors) 
> urbinEffInt( coef( summary( estOProbitQuad ) )[,1], allXVal = xMeanQuadInt, 
+   xPos = c( 2, 3 ), iPos = 5, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit", sqrt( diag( vcov( estOProbitQuad ) ) ) )
    effect      stdEr 
-0.2402762  0.2294149 
Warning message:
In urbinEffInt(allCoef = coef(summary(estOProbitQuad))[, 1], allXVal = xMeanQuadInt, xPos = c(2, 3), refBound = c(30, 40), intBound = c(50, 60), model = "oprobit", allCoefVcov = sqrt(diag(vcov(estOProbitQuad))), iPos = 5) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> urbinEffInt( coef( summary( estOProbitQuad ) )[-6,1], allXVal = xMeanQuadInt[-6], 
+   xPos = c( 2, 3 ), iPos = 5, refBound = c( 30, 40 ), intBound = c( 50, 60 ), 
+   model = "oprobit", sqrt( diag( vcov( estOProbitQuad ) ) )[-6] )
    effect      stdEr 
-0.2402762  0.2294149 
Warning message:
In urbinEffInt(allCoef = coef(summary(estOProbitQuad))[-6, 1], allXVal = xMeanQuadInt[-6], xPos = c(2, 3), refBound = c(30, 40), intBound = c(50, 60), model = "oprobit", allCoefVcov = sqrt(diag(vcov(estOProbitQuad)))[-6], iPos = 5) :
  the returned standard error is likely largely upward biased and, thus, in most cases meaningless; you can provide the full covariance matrix via argument 'allCoefVcov' to avoid this bias or use argument 'xMeanSd' to substantially reduce this bias 
> # effects of age changing from the 30-40 interval to the 50-60 interval
> # (standard errors + mean value and standard deviation of age)
> urbinEffInt( coef( summary( estOProbitQuad ) )[,1], xMeanQuadInt, 
+   xPos = c( 2, 3 ), iPos = 5, c( 30, 40 ), c( 50, 60 ), model = "oprobit", 
+   allCoefVcov = sqrt( diag( vcov( estOProbitQuad ) ) ),
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.24027619  0.06177879 
> urbinEffInt( coef( summary( estOProbitQuad ) )[-6,1], xMeanQuadInt[-6], 
+   xPos = c( 2, 3 ), iPos = 5, c( 30, 40 ), c( 50, 60 ), model = "oprobit", 
+   allCoefVcov = sqrt( diag( vcov( estOProbitQuad ) ) )[-6],
+   xMeanSd = c( mean( Mroz87$age ), sd( Mroz87$age ) ) )
     effect       stdEr 
-0.24027619  0.06177879 
> 
> 
> ### grouping and re-basing categorical variables
> ### effects of age changing from the 30-44 category to the 53-60 category
> # without standard errors
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, 
+   xPos = c( 2:4 ), iPos = 6, xGroups = c( -1, -1, 1, 0 ), model = "oprobit" )
   effect     stdEr 
-0.235462        NA 
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], 
+   xPos = c( 2:4 ), iPos = 6, xGroups = c( -1, -1, 1, 0 ), model = "oprobit" )
   effect     stdEr 
-0.235462        NA 
> # effects calculated based on predicted values
> names( xMeanInt ) <- 
+   gsub( "TRUE|full:", "", rownames( coef( summary( estOProbitInt ) ) ) )
> df30.37 <- df38.44 <- df45.52 <- df53.60 <- as.data.frame( t( xMeanInt ) ) 
> df30.37[ , 2:4 ] <- c( TRUE, FALSE, FALSE )
> df38.44[ , 2:4 ] <- c( FALSE, TRUE, FALSE )
> df45.52[ , 2:4 ] <- c( FALSE, FALSE, FALSE )
> df53.60[ , 2:4 ] <- c( FALSE, FALSE, TRUE )
> effCatNum <- predict( estOProbitInt, newdata = df53.60, type = "probs" ) -
+   sum( Mroz87$age30.37 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estOProbitInt, newdata = df30.37, type = "probs" ) -
+   sum( Mroz87$age38.44 ) / sum( Mroz87$age30.37 + Mroz87$age38.44 ) *
+   predict( estOProbitInt, newdata = df38.44, type = "probs" )
> print( effCatNum )
         no        part        full 
 0.23546064 -0.05310517 -0.18235548 
> print( sum( effCatNum[ c( "part", "full" ) ] ) )
[1] -0.2354606
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, 
+   c( 2:4 ), iPos = 6, c( -1, -1, 1, 0 ), model = "oprobit" )$derivCoef
[1]  0.0002459577 -0.2241157983 -0.1571489263  0.3816181715  0.0043427500
[6] -0.0003534469  0.0000000000
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], 
+   c( 2:4 ), iPos = 6, c( -1, -1, 1, 0 ), model = "oprobit" )$derivCoef
[1]  0.0002459577 -0.2241157983 -0.1571489263  0.3816181715  0.0043427500
[6] -0.0003534469
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitInt ) )[,1],
+   allXVal = xMeanInt, xPos = c( 2:4 ), iPos = 6, xGroups = c( -1, -1, 1, 0 ),
+   model = "oprobit" )
             kids age30.37TRUE age38.44TRUE age53.60TRUE       educ
[1,] 0.0002459578   -0.2241158   -0.1571489    0.3816182 0.00434275
           no|part part|full
[1,] -0.0003534469         0
> numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitInt ) )[-7,1],
+   allXVal = xMeanInt[-7], xPos = c( 2:4 ), iPos = 6, xGroups = c( -1, -1, 1, 0 ),
+   model = "oprobit" )
             kids age30.37TRUE age38.44TRUE age53.60TRUE       educ
[1,] 0.0002459578   -0.2241158   -0.1571489    0.3816182 0.00434275
           no|part
[1,] -0.0003534469
> # with full covariance matrix
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, c( 2:4 ), 
+   iPos = 6, c( -1, -1, 1, 0 ), vcov( estOProbitInt ), 
+   model = "oprobit" )
     effect       stdEr 
-0.23546197  0.06011706 
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], c( 2:4 ), 
+   iPos = 6, c( -1, -1, 1, 0 ), vcov( estOProbitInt )[-7,-7], 
+   model = "oprobit" )
     effect       stdEr 
-0.23546197  0.06011706 
> # with standard errors only
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, c( 2:4 ), 
+   iPos = 6, c( -1, -1, 1, 0 ), sqrt( diag( vcov( estOProbitInt ) ) ), 
+   model = "oprobit" )
     effect       stdEr 
-0.23546197  0.06502874 
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], c( 2:4 ), 
+   iPos = 6, c( -1, -1, 1, 0 ), sqrt( diag( vcov( estOProbitInt ) ) )[-7], 
+   model = "oprobit" )
     effect       stdEr 
-0.23546197  0.06502874 
> 
> ### effects of age changing from the 53-60 category to the 38-52 category
> # without standard errors
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, c( 2:4 ), 
+   iPos = 6, c( 0, 1, -1, 1 ), model = "oprobit" )
   effect     stdEr 
0.1997366        NA 
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], c( 2:4 ), 
+   iPos = 6, c( 0, 1, -1, 1 ), model = "oprobit" )
   effect     stdEr 
0.1997366        NA 
> # effects calculated based on predicted values
> effCat2Num <- sum( Mroz87$age38.44 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estOProbitInt, newdata = df38.44, type = "probs" ) +
+   sum( Mroz87$age45.52 ) / sum( Mroz87$age38.44 + Mroz87$age45.52 ) *
+   predict( estOProbitInt, newdata = df45.52, type = "probs" ) -
+   predict( estOProbitInt, newdata = df53.60, type = "probs" )
> print( effCat2Num )
         no        part        full 
-0.19949412  0.04963032  0.14986380 
> print( sum( effCat2Num[ c( "part", "full" ) ] ) )
[1] 0.1994941
> # partial derivatives of the effect wrt the coefficients
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, 
+   c( 2:4 ), iPos = 6, c( 0, 1, -1, 1 ), model = "oprobit" )$derivCoef
[1]  0.006084175  0.000000000  0.169638478 -0.381618171  0.107425164
[6] -0.008743099  0.000000000
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], 
+   c( 2:4 ), iPos = 6, c( 0, 1, -1, 1 ), model = "oprobit" )$derivCoef
[1]  0.006084175  0.000000000  0.169638478 -0.381618171  0.107425164
[6] -0.008743099
> # numerically computed partial derivatives of the effect wrt the coefficients
> numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitInt ) )[,1],
+   allXVal = xMeanInt, xPos = c( 2:4 ), iPos = 6, xGroups = c( 0, 1, -1, 1 ), 
+   model = "oprobit" )
            kids age30.37TRUE age38.44TRUE age53.60TRUE      educ      no|part
[1,] 0.006084175            0    0.1696385   -0.3816182 0.1074252 -0.008743099
     part|full
[1,]         0
> numericGradient( function( x, ... ){ urbinEffCat( x, ... )$effect }, 
+   t0 = coef( summary( estOProbitInt ) )[-7,1],
+   allXVal = xMeanInt[-7], xPos = c( 2:4 ), iPos = 6, xGroups = c( 0, 1, -1, 1 ), 
+   model = "oprobit" )
            kids age30.37TRUE age38.44TRUE age53.60TRUE      educ      no|part
[1,] 0.006084175            0    0.1696385   -0.3816182 0.1074252 -0.008743099
> # with full covariance matrix
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, c( 2:4 ), 
+   iPos = 6, c( 0, 1, -1, 1 ), vcov( estOProbitInt ), 
+   model = "oprobit" )
   effect     stdEr 
0.1997366 0.0559494 
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], c( 2:4 ), 
+   iPos = 6, c( 0, 1, -1, 1 ), vcov( estOProbitInt )[-7,-7], 
+   model = "oprobit" )
   effect     stdEr 
0.1997366 0.0559494 
> # with standard errors only
> urbinEffCat( coef( summary( estOProbitInt ) )[,1], xMeanInt, c( 2:4 ), 
+   iPos = 6, c( 0, 1, -1, 1 ), sqrt( diag( vcov( estOProbitInt ) ) ), 
+   model = "oprobit" )
    effect      stdEr 
0.19973662 0.06038844 
> urbinEffCat( coef( summary( estOProbitInt ) )[-7,1], xMeanInt[-7], c( 2:4 ), 
+   iPos = 6, c( 0, 1, -1, 1 ), sqrt( diag( vcov( estOProbitInt ) ) )[-7], 
+   model = "oprobit" )
    effect      stdEr 
0.19973662 0.06038844 
> 
> proc.time()
   user  system elapsed 
  0.403   0.020   0.418 
